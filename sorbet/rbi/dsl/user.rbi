# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User`.
# Please instead update this file by running `bin/tapioca dsl User`.

class User
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User)) }
    def fifth; end

    sig { returns(::User) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::User)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def find_or_initialize_by(attributes, &block); end

    sig { returns(T.nilable(::User)) }
    def find_sole_by; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::User) }
    def first!; end

    sig { returns(T.nilable(::User)) }
    def forty_two; end

    sig { returns(::User) }
    def forty_two!; end

    sig { returns(T.nilable(::User)) }
    def fourth; end

    sig { returns(::User) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::User) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::User).void)).returns(::User) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::User).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User)) }
    def second; end

    sig { returns(::User) }
    def second!; end

    sig { returns(T.nilable(::User)) }
    def second_to_last; end

    sig { returns(::User) }
    def second_to_last!; end

    sig { returns(T.nilable(::User)) }
    def sole; end

    sig { params(column_name: T.nilable(T.any(String, Symbol)), block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))).returns(T.untyped) }
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::User) }
    def take!; end

    sig { returns(T.nilable(::User)) }
    def third; end

    sig { returns(::User) }
    def third!; end

    sig { returns(T.nilable(::User)) }
    def third_to_last; end

    sig { returns(::User) }
    def third_to_last!; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(attributes: Hash, returning: T.nilable(T.any(T::Array[Symbol], FalseClass)), unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))).returns(ActiveRecord::Result) }
    def insert(attributes, returning: nil, unique_by: nil); end

    sig { params(attributes: Hash, returning: T.nilable(T.any(T::Array[Symbol], FalseClass))).returns(ActiveRecord::Result) }
    def insert!(attributes, returning: nil); end

    sig { params(attributes: T::Array[Hash], returning: T.nilable(T.any(T::Array[Symbol], FalseClass)), unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))).returns(ActiveRecord::Result) }
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(attributes: T::Array[Hash], returning: T.nilable(T.any(T::Array[Symbol], FalseClass))).returns(ActiveRecord::Result) }
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(attributes: Hash, returning: T.nilable(T.any(T::Array[Symbol], FalseClass)), unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))).returns(ActiveRecord::Result) }
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig { params(attributes: T::Array[Hash], returning: T.nilable(T.any(T::Array[Symbol], FalseClass)), unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))).returns(ActiveRecord::Result) }
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(T::Boolean)) }
    def active; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def active=(value); end

    sig { returns(T::Boolean) }
    def active?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_before_last_save; end

    sig { returns(T.untyped) }
    def active_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def active_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def active_previous_change; end

    sig { returns(T::Boolean) }
    def active_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def active_was; end

    sig { void }
    def active_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_login_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_login_at=(value); end

    sig { returns(T::Boolean) }
    def current_login_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_login_at_before_last_save; end

    sig { returns(T.untyped) }
    def current_login_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_login_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_login_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_login_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_login_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_login_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def current_login_at_previous_change; end

    sig { returns(T::Boolean) }
    def current_login_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_login_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def current_login_at_was; end

    sig { void }
    def current_login_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def current_login_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def current_login_ip=(value); end

    sig { returns(T::Boolean) }
    def current_login_ip?; end

    sig { returns(T.nilable(::String)) }
    def current_login_ip_before_last_save; end

    sig { returns(T.untyped) }
    def current_login_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_login_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_login_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_login_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_login_ip_changed?; end

    sig { returns(T.nilable(::String)) }
    def current_login_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def current_login_ip_previous_change; end

    sig { returns(T::Boolean) }
    def current_login_ip_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def current_login_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def current_login_ip_was; end

    sig { void }
    def current_login_ip_will_change!; end

    sig { returns(::String) }
    def email; end

    sig { params(value: ::String).returns(::String) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def email_previous_change; end

    sig { returns(T::Boolean) }
    def email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T::Boolean) }
    def email_verified; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def email_verified=(value); end

    sig { returns(T::Boolean) }
    def email_verified?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_verified_before_last_save; end

    sig { returns(T.untyped) }
    def email_verified_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_verified_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def email_verified_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def email_verified_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_verified_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_verified_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def email_verified_previous_change; end

    sig { returns(T::Boolean) }
    def email_verified_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_verified_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def email_verified_was; end

    sig { void }
    def email_verified_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(::Integer) }
    def failed_login_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def failed_login_count=(value); end

    sig { returns(T::Boolean) }
    def failed_login_count?; end

    sig { returns(T.nilable(::Integer)) }
    def failed_login_count_before_last_save; end

    sig { returns(T.untyped) }
    def failed_login_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def failed_login_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def failed_login_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def failed_login_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def failed_login_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def failed_login_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def failed_login_count_previous_change; end

    sig { returns(T::Boolean) }
    def failed_login_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def failed_login_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def failed_login_count_was; end

    sig { void }
    def failed_login_count_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_login_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_login_at=(value); end

    sig { returns(T::Boolean) }
    def last_login_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_login_at_before_last_save; end

    sig { returns(T.untyped) }
    def last_login_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_login_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_login_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_login_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_login_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_login_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def last_login_at_previous_change; end

    sig { returns(T::Boolean) }
    def last_login_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_login_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def last_login_at_was; end

    sig { void }
    def last_login_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_login_ip; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_login_ip=(value); end

    sig { returns(T::Boolean) }
    def last_login_ip?; end

    sig { returns(T.nilable(::String)) }
    def last_login_ip_before_last_save; end

    sig { returns(T.untyped) }
    def last_login_ip_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_login_ip_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_login_ip_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_login_ip_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_login_ip_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_login_ip_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_login_ip_previous_change; end

    sig { returns(T::Boolean) }
    def last_login_ip_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_login_ip_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_login_ip_was; end

    sig { void }
    def last_login_ip_will_change!; end

    sig { returns(::Integer) }
    def login_count; end

    sig { params(value: ::Integer).returns(::Integer) }
    def login_count=(value); end

    sig { returns(T::Boolean) }
    def login_count?; end

    sig { returns(T.nilable(::Integer)) }
    def login_count_before_last_save; end

    sig { returns(T.untyped) }
    def login_count_before_type_cast; end

    sig { returns(T::Boolean) }
    def login_count_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def login_count_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def login_count_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def login_count_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def login_count_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def login_count_previous_change; end

    sig { returns(T::Boolean) }
    def login_count_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def login_count_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def login_count_was; end

    sig { void }
    def login_count_will_change!; end

    sig { returns(::String) }
    def password_hash; end

    sig { params(value: ::String).returns(::String) }
    def password_hash=(value); end

    sig { returns(T::Boolean) }
    def password_hash?; end

    sig { returns(T.nilable(::String)) }
    def password_hash_before_last_save; end

    sig { returns(T.untyped) }
    def password_hash_before_type_cast; end

    sig { returns(T::Boolean) }
    def password_hash_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def password_hash_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def password_hash_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def password_hash_changed?; end

    sig { returns(T.nilable(::String)) }
    def password_hash_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def password_hash_previous_change; end

    sig { returns(T::Boolean) }
    def password_hash_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def password_hash_previously_was; end

    sig { returns(T.nilable(::String)) }
    def password_hash_was; end

    sig { void }
    def password_hash_will_change!; end

    sig { returns(::String) }
    def password_salt; end

    sig { params(value: ::String).returns(::String) }
    def password_salt=(value); end

    sig { returns(T::Boolean) }
    def password_salt?; end

    sig { returns(T.nilable(::String)) }
    def password_salt_before_last_save; end

    sig { returns(T.untyped) }
    def password_salt_before_type_cast; end

    sig { returns(T::Boolean) }
    def password_salt_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def password_salt_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def password_salt_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def password_salt_changed?; end

    sig { returns(T.nilable(::String)) }
    def password_salt_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def password_salt_previous_change; end

    sig { returns(T::Boolean) }
    def password_salt_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def password_salt_previously_was; end

    sig { returns(T.nilable(::String)) }
    def password_salt_was; end

    sig { void }
    def password_salt_will_change!; end

    sig { returns(::String) }
    def perishable_token; end

    sig { params(value: ::String).returns(::String) }
    def perishable_token=(value); end

    sig { returns(T::Boolean) }
    def perishable_token?; end

    sig { returns(T.nilable(::String)) }
    def perishable_token_before_last_save; end

    sig { returns(T.untyped) }
    def perishable_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def perishable_token_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def perishable_token_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def perishable_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def perishable_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def perishable_token_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def perishable_token_previous_change; end

    sig { returns(T::Boolean) }
    def perishable_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def perishable_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def perishable_token_was; end

    sig { void }
    def perishable_token_will_change!; end

    sig { returns(::String) }
    def persistence_token; end

    sig { params(value: ::String).returns(::String) }
    def persistence_token=(value); end

    sig { returns(T::Boolean) }
    def persistence_token?; end

    sig { returns(T.nilable(::String)) }
    def persistence_token_before_last_save; end

    sig { returns(T.untyped) }
    def persistence_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def persistence_token_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def persistence_token_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def persistence_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def persistence_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def persistence_token_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def persistence_token_previous_change; end

    sig { returns(T::Boolean) }
    def persistence_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def persistence_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def persistence_token_was; end

    sig { void }
    def persistence_token_will_change!; end

    sig { void }
    def restore_active!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_current_login_at!; end

    sig { void }
    def restore_current_login_ip!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_email_verified!; end

    sig { void }
    def restore_failed_login_count!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_last_login_at!; end

    sig { void }
    def restore_last_login_ip!; end

    sig { void }
    def restore_login_count!; end

    sig { void }
    def restore_password_hash!; end

    sig { void }
    def restore_password_salt!; end

    sig { void }
    def restore_perishable_token!; end

    sig { void }
    def restore_persistence_token!; end

    sig { void }
    def restore_single_access_token!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_active; end

    sig { returns(T::Boolean) }
    def saved_change_to_active?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_current_login_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_login_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_current_login_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_current_login_ip?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_email_verified; end

    sig { returns(T::Boolean) }
    def saved_change_to_email_verified?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_failed_login_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_failed_login_count?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_last_login_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_login_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_login_ip; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_login_ip?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_login_count; end

    sig { returns(T::Boolean) }
    def saved_change_to_login_count?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_password_hash; end

    sig { returns(T::Boolean) }
    def saved_change_to_password_hash?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_password_salt; end

    sig { returns(T::Boolean) }
    def saved_change_to_password_salt?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_perishable_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_perishable_token?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_persistence_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_persistence_token?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_single_access_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_single_access_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(::String) }
    def single_access_token; end

    sig { params(value: ::String).returns(::String) }
    def single_access_token=(value); end

    sig { returns(T::Boolean) }
    def single_access_token?; end

    sig { returns(T.nilable(::String)) }
    def single_access_token_before_last_save; end

    sig { returns(T.untyped) }
    def single_access_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def single_access_token_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def single_access_token_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def single_access_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def single_access_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def single_access_token_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def single_access_token_previous_change; end

    sig { returns(T::Boolean) }
    def single_access_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def single_access_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def single_access_token_was; end

    sig { void }
    def single_access_token_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_login_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current_login_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email_verified?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_failed_login_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_login_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_login_ip?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_login_count?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_password_hash?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_password_salt?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_perishable_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_persistence_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_single_access_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    sig { returns(T::Array[::User]) }
    def to_ary; end

    Elem = type_member(fixed: ::User)
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end

    Elem = type_member(fixed: ::User)
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    sig { params(records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])).returns(PrivateCollectionProxy) }
    def <<(*records); end

    sig { params(records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])).returns(PrivateCollectionProxy) }
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig { params(records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])).returns(PrivateCollectionProxy) }
    def concat(*records); end

    sig { params(records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])).returns(T::Array[::User]) }
    def delete(*records); end

    sig { params(records: T.any(::User, Integer, String, T::Enumerable[T.any(::User, Integer, String, T::Enumerable[::User])])).returns(T::Array[::User]) }
    def destroy(*records); end

    sig { returns(T::Array[::User]) }
    def load_target; end

    sig { params(records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])).returns(PrivateCollectionProxy) }
    def prepend(*records); end

    sig { params(records: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])).returns(PrivateCollectionProxy) }
    def push(*records); end

    sig { params(other_array: T.any(::User, T::Enumerable[T.any(::User, T::Enumerable[::User])])).returns(T::Array[::User]) }
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User]) }
    def target; end

    sig { returns(T::Array[::User]) }
    def to_ary; end

    Elem = type_member(fixed: ::User)
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    sig { returns(T::Array[::User]) }
    def to_ary; end

    Elem = type_member(fixed: ::User)
  end

  class PrivateRelationWhereChain < PrivateRelation
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end

    Elem = type_member(fixed: ::User)
  end
end
