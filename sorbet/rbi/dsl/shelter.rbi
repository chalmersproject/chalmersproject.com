# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Shelter`.
# Please instead update this file by running `bin/tapioca dsl Shelter`.

class Shelter
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { returns(ActiveStorage::Attached::One) }
  def image; end

  sig { params(attachable: T.untyped).returns(T.untyped) }
  def image=(attachable); end

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Shelter).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Shelter]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Shelter)) }
    def fifth; end

    sig { returns(::Shelter) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Shelter)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Shelter) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def find_or_initialize_by(attributes, &block); end

    sig { returns(T.nilable(::Shelter)) }
    def find_sole_by; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Shelter) }
    def first!; end

    sig { returns(T.nilable(::Shelter)) }
    def forty_two; end

    sig { returns(::Shelter) }
    def forty_two!; end

    sig { returns(T.nilable(::Shelter)) }
    def fourth; end

    sig { returns(::Shelter) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Shelter) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Shelter).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Shelter).void)).returns(::Shelter) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Shelter).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Shelter).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Shelter)) }
    def second; end

    sig { returns(::Shelter) }
    def second!; end

    sig { returns(T.nilable(::Shelter)) }
    def second_to_last; end

    sig { returns(::Shelter) }
    def second_to_last!; end

    sig { returns(T.nilable(::Shelter)) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Shelter) }
    def take!; end

    sig { returns(T.nilable(::Shelter)) }
    def third; end

    sig { returns(::Shelter) }
    def third!; end

    sig { returns(T.nilable(::Shelter)) }
    def third_to_last; end

    sig { returns(::Shelter) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def build_image_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def build_image_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_image_attachment(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Attachment) }
    def create_image_attachment!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_image_blob(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ActiveStorage::Blob) }
    def create_image_blob!(*args, &blk); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def image_attachment; end

    sig { params(value: T.nilable(::ActiveStorage::Attachment)).void }
    def image_attachment=(value); end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def image_blob; end

    sig { params(value: T.nilable(::ActiveStorage::Blob)).void }
    def image_blob=(value); end

    sig { returns(T.nilable(::ActiveStorage::Attachment)) }
    def reload_image_attachment; end

    sig { returns(T.nilable(::ActiveStorage::Blob)) }
    def reload_image_blob; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_attached_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def about; end

    sig { params(value: ::String).returns(::String) }
    def about=(value); end

    sig { returns(T::Boolean) }
    def about?; end

    sig { returns(T.nilable(::String)) }
    def about_before_last_save; end

    sig { returns(T.untyped) }
    def about_before_type_cast; end

    sig { returns(T::Boolean) }
    def about_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def about_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def about_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def about_changed?; end

    sig { returns(T.nilable(::String)) }
    def about_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def about_previous_change; end

    sig { returns(T::Boolean) }
    def about_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def about_previously_was; end

    sig { returns(T.nilable(::String)) }
    def about_was; end

    sig { void }
    def about_will_change!; end

    sig { returns(::String) }
    def address; end

    sig { params(value: ::String).returns(::String) }
    def address=(value); end

    sig { returns(T::Boolean) }
    def address?; end

    sig { returns(T.nilable(::String)) }
    def address_before_last_save; end

    sig { returns(T.untyped) }
    def address_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def address_changed?; end

    sig { returns(T.nilable(::String)) }
    def address_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_previous_change; end

    sig { returns(T::Boolean) }
    def address_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_was; end

    sig { void }
    def address_will_change!; end

    sig { returns(T.nilable(::String)) }
    def contact_email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def contact_email=(value); end

    sig { returns(T::Boolean) }
    def contact_email?; end

    sig { returns(T.nilable(::String)) }
    def contact_email_before_last_save; end

    sig { returns(T.untyped) }
    def contact_email_before_type_cast; end

    sig { returns(T::Boolean) }
    def contact_email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def contact_email_changed?; end

    sig { returns(T.nilable(::String)) }
    def contact_email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_email_previous_change; end

    sig { returns(T::Boolean) }
    def contact_email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def contact_email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def contact_email_was; end

    sig { void }
    def contact_email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def contact_phone; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def contact_phone=(value); end

    sig { returns(T::Boolean) }
    def contact_phone?; end

    sig { returns(T.nilable(::String)) }
    def contact_phone_before_last_save; end

    sig { returns(T.untyped) }
    def contact_phone_before_type_cast; end

    sig { returns(T::Boolean) }
    def contact_phone_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_phone_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_phone_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def contact_phone_changed?; end

    sig { returns(T.nilable(::String)) }
    def contact_phone_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def contact_phone_previous_change; end

    sig { returns(T::Boolean) }
    def contact_phone_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def contact_phone_previously_was; end

    sig { returns(T.nilable(::String)) }
    def contact_phone_was; end

    sig { void }
    def contact_phone_will_change!; end

    sig { returns(T.nilable(::DateTime)) }
    def created_at; end

    sig { params(value: ::DateTime).returns(::DateTime) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::DateTime)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::DateTime)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def food_availability; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def food_availability=(value); end

    sig { returns(T::Boolean) }
    def food_availability?; end

    sig { returns(T.nilable(::String)) }
    def food_availability_before_last_save; end

    sig { returns(T.untyped) }
    def food_availability_before_type_cast; end

    sig { returns(T::Boolean) }
    def food_availability_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def food_availability_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def food_availability_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def food_availability_changed?; end

    sig { returns(T.nilable(::String)) }
    def food_availability_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def food_availability_previous_change; end

    sig { returns(T::Boolean) }
    def food_availability_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def food_availability_previously_was; end

    sig { returns(T.nilable(::String)) }
    def food_availability_was; end

    sig { void }
    def food_availability_will_change!; end

    sig { returns(T.untyped) }
    def id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.untyped) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.untyped) }
    def id_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.untyped) }
    def id_previously_was; end

    sig { returns(T.untyped) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.untyped) }
    def location; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def location=(value); end

    sig { returns(T::Boolean) }
    def location?; end

    sig { returns(T.untyped) }
    def location_before_last_save; end

    sig { returns(T.untyped) }
    def location_before_type_cast; end

    sig { returns(T::Boolean) }
    def location_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def location_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def location_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def location_changed?; end

    sig { returns(T.untyped) }
    def location_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def location_previous_change; end

    sig { returns(T::Boolean) }
    def location_previously_changed?; end

    sig { returns(T.untyped) }
    def location_previously_was; end

    sig { returns(T.untyped) }
    def location_was; end

    sig { void }
    def location_will_change!; end

    sig { returns(::String) }
    def name; end

    sig { params(value: ::String).returns(::String) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { void }
    def restore_about!; end

    sig { void }
    def restore_address!; end

    sig { void }
    def restore_contact_email!; end

    sig { void }
    def restore_contact_phone!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_food_availability!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_location!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_tags!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_website_url!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_about; end

    sig { returns(T::Boolean) }
    def saved_change_to_about?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_address?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_contact_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_contact_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_contact_phone; end

    sig { returns(T::Boolean) }
    def saved_change_to_contact_phone?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_food_availability; end

    sig { returns(T::Boolean) }
    def saved_change_to_food_availability?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_location; end

    sig { returns(T::Boolean) }
    def saved_change_to_location?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_tags; end

    sig { returns(T::Boolean) }
    def saved_change_to_tags?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_website_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_website_url?; end

    sig { returns(::String) }
    def slug; end

    sig { params(value: ::String).returns(::String) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def slug_changed?; end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def slug_previous_change; end

    sig { returns(T::Boolean) }
    def slug_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(T.untyped) }
    def tags; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def tags=(value); end

    sig { returns(T::Boolean) }
    def tags?; end

    sig { returns(T.untyped) }
    def tags_before_last_save; end

    sig { returns(T.untyped) }
    def tags_before_type_cast; end

    sig { returns(T::Boolean) }
    def tags_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tags_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tags_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def tags_changed?; end

    sig { returns(T.untyped) }
    def tags_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def tags_previous_change; end

    sig { returns(T::Boolean) }
    def tags_previously_changed?; end

    sig { returns(T.untyped) }
    def tags_previously_was; end

    sig { returns(T.untyped) }
    def tags_was; end

    sig { void }
    def tags_will_change!; end

    sig { returns(T.nilable(::DateTime)) }
    def updated_at; end

    sig { params(value: ::DateTime).returns(::DateTime) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::DateTime)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::DateTime)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def website_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def website_url=(value); end

    sig { returns(T::Boolean) }
    def website_url?; end

    sig { returns(T.nilable(::String)) }
    def website_url_before_last_save; end

    sig { returns(T.untyped) }
    def website_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def website_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def website_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def website_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_previous_change; end

    sig { returns(T::Boolean) }
    def website_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def website_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def website_url_was; end

    sig { void }
    def website_url_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_about?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contact_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_contact_phone?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_food_availability?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_location?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tags?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_website_url?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_attached_image(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member(fixed: ::Shelter)

    sig { returns(T::Array[::Shelter]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member(fixed: ::Shelter)

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member(fixed: ::Shelter)

    sig do
      params(
        records: T.any(::Shelter, T::Enumerable[T.any(::Shelter, T::Enumerable[::Shelter])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Shelter, T::Enumerable[T.any(::Shelter, T::Enumerable[::Shelter])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Shelter, T::Enumerable[T.any(::Shelter, T::Enumerable[::Shelter])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Shelter, Integer, String, T::Enumerable[T.any(::Shelter, Integer, String, T::Enumerable[::Shelter])])
      ).returns(T::Array[::Shelter])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Shelter, Integer, String, T::Enumerable[T.any(::Shelter, Integer, String, T::Enumerable[::Shelter])])
      ).returns(T::Array[::Shelter])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Shelter]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Shelter, T::Enumerable[T.any(::Shelter, T::Enumerable[::Shelter])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Shelter, T::Enumerable[T.any(::Shelter, T::Enumerable[::Shelter])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Shelter, T::Enumerable[T.any(::Shelter, T::Enumerable[::Shelter])])
      ).returns(T::Array[::Shelter])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Shelter]) }
    def target; end

    sig { returns(T::Array[::Shelter]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member(fixed: ::Shelter)

    sig { returns(T::Array[::Shelter]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member(fixed: ::Shelter)

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
