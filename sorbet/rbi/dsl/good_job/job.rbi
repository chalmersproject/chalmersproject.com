# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GoodJob::Job`.
# Please instead update this file by running `bin/tapioca dsl GoodJob::Job`.

class GoodJob::Job
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::GoodJob::Job).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::GoodJob::Job]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def fifth; end

    sig { returns(::GoodJob::Job) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::GoodJob::Job)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::GoodJob::Job) }
    def find_by!(*args); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def find_or_initialize_by(attributes, &block); end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def find_sole_by; end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::GoodJob::Job) }
    def first!; end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def forty_two; end

    sig { returns(::GoodJob::Job) }
    def forty_two!; end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def fourth; end

    sig { returns(::GoodJob::Job) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::GoodJob::Job) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::GoodJob::Job).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::GoodJob::Job).void)).returns(::GoodJob::Job) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::GoodJob::Job).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::GoodJob::Job).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def second; end

    sig { returns(::GoodJob::Job) }
    def second!; end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def second_to_last; end

    sig { returns(::GoodJob::Job) }
    def second_to_last!; end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def sole; end

    sig { params(column_name: T.nilable(T.any(String, Symbol)), block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))).returns(T.untyped) }
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::GoodJob::Job) }
    def take!; end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def third; end

    sig { returns(::GoodJob::Job) }
    def third!; end

    sig { returns(T.nilable(::GoodJob::Job)) }
    def third_to_last; end

    sig { returns(::GoodJob::Job) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::GoodJob::ActiveJobJob) }
    def build_job(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GoodJob::ActiveJobJob) }
    def create_job(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GoodJob::ActiveJobJob) }
    def create_job!(*args, &blk); end

    sig { returns(T.nilable(::GoodJob::ActiveJobJob)) }
    def job; end

    sig { params(value: T.nilable(::GoodJob::ActiveJobJob)).void }
    def job=(value); end

    sig { returns(T.nilable(::GoodJob::ActiveJobJob)) }
    def reload_job; end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active_job_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def advisory_lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def advisory_locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def advisory_unlocked(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def dead(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def display_all(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def finished(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def head(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(attributes: Hash, returning: T.nilable(T.any(T::Array[Symbol], FalseClass)), unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))).returns(ActiveRecord::Result) }
    def insert(attributes, returning: nil, unique_by: nil); end

    sig { params(attributes: Hash, returning: T.nilable(T.any(T::Array[Symbol], FalseClass))).returns(ActiveRecord::Result) }
    def insert!(attributes, returning: nil); end

    sig { params(attributes: T::Array[Hash], returning: T.nilable(T.any(T::Array[Symbol], FalseClass)), unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))).returns(ActiveRecord::Result) }
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(attributes: T::Array[Hash], returning: T.nilable(T.any(T::Array[Symbol], FalseClass))).returns(ActiveRecord::Result) }
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def job_class(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins_advisory_locks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only_scheduled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def owns_advisory_locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def priority_ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def queue_string(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def running(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def schedule_ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def search_text(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unfinished(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(attributes: Hash, returning: T.nilable(T.any(T::Array[Symbol], FalseClass)), unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))).returns(ActiveRecord::Result) }
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig { params(attributes: T::Array[Hash], returning: T.nilable(T.any(T::Array[Symbol], FalseClass)), unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))).returns(ActiveRecord::Result) }
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.untyped) }
    def active_job_id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def active_job_id=(value); end

    sig { returns(T::Boolean) }
    def active_job_id?; end

    sig { returns(T.untyped) }
    def active_job_id_before_last_save; end

    sig { returns(T.untyped) }
    def active_job_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def active_job_id_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def active_job_id_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def active_job_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def active_job_id_changed?; end

    sig { returns(T.untyped) }
    def active_job_id_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def active_job_id_previous_change; end

    sig { returns(T::Boolean) }
    def active_job_id_previously_changed?; end

    sig { returns(T.untyped) }
    def active_job_id_previously_was; end

    sig { returns(T.untyped) }
    def active_job_id_was; end

    sig { void }
    def active_job_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def concurrency_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def concurrency_key=(value); end

    sig { returns(T::Boolean) }
    def concurrency_key?; end

    sig { returns(T.nilable(::String)) }
    def concurrency_key_before_last_save; end

    sig { returns(T.untyped) }
    def concurrency_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def concurrency_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def concurrency_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def concurrency_key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def concurrency_key_changed?; end

    sig { returns(T.nilable(::String)) }
    def concurrency_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def concurrency_key_previous_change; end

    sig { returns(T::Boolean) }
    def concurrency_key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def concurrency_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def concurrency_key_was; end

    sig { void }
    def concurrency_key_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::DateTime)) }
    def cron_at; end

    sig { params(value: T.nilable(::DateTime)).returns(T.nilable(::DateTime)) }
    def cron_at=(value); end

    sig { returns(T::Boolean) }
    def cron_at?; end

    sig { returns(T.nilable(::DateTime)) }
    def cron_at_before_last_save; end

    sig { returns(T.untyped) }
    def cron_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def cron_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def cron_at_change; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def cron_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def cron_at_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def cron_at_in_database; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def cron_at_previous_change; end

    sig { returns(T::Boolean) }
    def cron_at_previously_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def cron_at_previously_was; end

    sig { returns(T.nilable(::DateTime)) }
    def cron_at_was; end

    sig { void }
    def cron_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def cron_key; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def cron_key=(value); end

    sig { returns(T::Boolean) }
    def cron_key?; end

    sig { returns(T.nilable(::String)) }
    def cron_key_before_last_save; end

    sig { returns(T.untyped) }
    def cron_key_before_type_cast; end

    sig { returns(T::Boolean) }
    def cron_key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cron_key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cron_key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def cron_key_changed?; end

    sig { returns(T.nilable(::String)) }
    def cron_key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def cron_key_previous_change; end

    sig { returns(T::Boolean) }
    def cron_key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def cron_key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def cron_key_was; end

    sig { void }
    def cron_key_will_change!; end

    sig { returns(T.nilable(::String)) }
    def error; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def error=(value); end

    sig { returns(T::Boolean) }
    def error?; end

    sig { returns(T.nilable(::String)) }
    def error_before_last_save; end

    sig { returns(T.untyped) }
    def error_before_type_cast; end

    sig { returns(T::Boolean) }
    def error_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def error_changed?; end

    sig { returns(T.nilable(::String)) }
    def error_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def error_previous_change; end

    sig { returns(T::Boolean) }
    def error_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def error_previously_was; end

    sig { returns(T.nilable(::String)) }
    def error_was; end

    sig { void }
    def error_will_change!; end

    sig { returns(T.nilable(::DateTime)) }
    def finished_at; end

    sig { params(value: T.nilable(::DateTime)).returns(T.nilable(::DateTime)) }
    def finished_at=(value); end

    sig { returns(T::Boolean) }
    def finished_at?; end

    sig { returns(T.nilable(::DateTime)) }
    def finished_at_before_last_save; end

    sig { returns(T.untyped) }
    def finished_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def finished_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def finished_at_change; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def finished_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def finished_at_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def finished_at_in_database; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def finished_at_previous_change; end

    sig { returns(T::Boolean) }
    def finished_at_previously_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def finished_at_previously_was; end

    sig { returns(T.nilable(::DateTime)) }
    def finished_at_was; end

    sig { void }
    def finished_at_will_change!; end

    sig { returns(T.untyped) }
    def id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.untyped) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.untyped) }
    def id_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.untyped) }
    def id_previously_was; end

    sig { returns(T.untyped) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::DateTime)) }
    def performed_at; end

    sig { params(value: T.nilable(::DateTime)).returns(T.nilable(::DateTime)) }
    def performed_at=(value); end

    sig { returns(T::Boolean) }
    def performed_at?; end

    sig { returns(T.nilable(::DateTime)) }
    def performed_at_before_last_save; end

    sig { returns(T.untyped) }
    def performed_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def performed_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def performed_at_change; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def performed_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def performed_at_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def performed_at_in_database; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def performed_at_previous_change; end

    sig { returns(T::Boolean) }
    def performed_at_previously_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def performed_at_previously_was; end

    sig { returns(T.nilable(::DateTime)) }
    def performed_at_was; end

    sig { void }
    def performed_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def priority; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def priority=(value); end

    sig { returns(T::Boolean) }
    def priority?; end

    sig { returns(T.nilable(::Integer)) }
    def priority_before_last_save; end

    sig { returns(T.untyped) }
    def priority_before_type_cast; end

    sig { returns(T::Boolean) }
    def priority_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def priority_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def priority_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def priority_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def priority_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def priority_previous_change; end

    sig { returns(T::Boolean) }
    def priority_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def priority_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def priority_was; end

    sig { void }
    def priority_will_change!; end

    sig { returns(T.nilable(::String)) }
    def queue_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def queue_name=(value); end

    sig { returns(T::Boolean) }
    def queue_name?; end

    sig { returns(T.nilable(::String)) }
    def queue_name_before_last_save; end

    sig { returns(T.untyped) }
    def queue_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def queue_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def queue_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def queue_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def queue_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def queue_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def queue_name_previous_change; end

    sig { returns(T::Boolean) }
    def queue_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def queue_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def queue_name_was; end

    sig { void }
    def queue_name_will_change!; end

    sig { void }
    def restore_active_job_id!; end

    sig { void }
    def restore_concurrency_key!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_cron_at!; end

    sig { void }
    def restore_cron_key!; end

    sig { void }
    def restore_error!; end

    sig { void }
    def restore_finished_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_performed_at!; end

    sig { void }
    def restore_priority!; end

    sig { void }
    def restore_queue_name!; end

    sig { void }
    def restore_retried_good_job_id!; end

    sig { void }
    def restore_scheduled_at!; end

    sig { void }
    def restore_serialized_params!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.untyped) }
    def retried_good_job_id; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def retried_good_job_id=(value); end

    sig { returns(T::Boolean) }
    def retried_good_job_id?; end

    sig { returns(T.untyped) }
    def retried_good_job_id_before_last_save; end

    sig { returns(T.untyped) }
    def retried_good_job_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def retried_good_job_id_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def retried_good_job_id_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def retried_good_job_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def retried_good_job_id_changed?; end

    sig { returns(T.untyped) }
    def retried_good_job_id_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def retried_good_job_id_previous_change; end

    sig { returns(T::Boolean) }
    def retried_good_job_id_previously_changed?; end

    sig { returns(T.untyped) }
    def retried_good_job_id_previously_was; end

    sig { returns(T.untyped) }
    def retried_good_job_id_was; end

    sig { void }
    def retried_good_job_id_will_change!; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_active_job_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_active_job_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_concurrency_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_concurrency_key?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def saved_change_to_cron_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_cron_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_cron_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_cron_key?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_error; end

    sig { returns(T::Boolean) }
    def saved_change_to_error?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def saved_change_to_finished_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_finished_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def saved_change_to_performed_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_performed_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_priority; end

    sig { returns(T::Boolean) }
    def saved_change_to_priority?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_queue_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_queue_name?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_retried_good_job_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_retried_good_job_id?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def saved_change_to_scheduled_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_scheduled_at?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def saved_change_to_serialized_params; end

    sig { returns(T::Boolean) }
    def saved_change_to_serialized_params?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::DateTime)) }
    def scheduled_at; end

    sig { params(value: T.nilable(::DateTime)).returns(T.nilable(::DateTime)) }
    def scheduled_at=(value); end

    sig { returns(T::Boolean) }
    def scheduled_at?; end

    sig { returns(T.nilable(::DateTime)) }
    def scheduled_at_before_last_save; end

    sig { returns(T.untyped) }
    def scheduled_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def scheduled_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def scheduled_at_change; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def scheduled_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def scheduled_at_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def scheduled_at_in_database; end

    sig { returns(T.nilable([T.nilable(::DateTime), T.nilable(::DateTime)])) }
    def scheduled_at_previous_change; end

    sig { returns(T::Boolean) }
    def scheduled_at_previously_changed?; end

    sig { returns(T.nilable(::DateTime)) }
    def scheduled_at_previously_was; end

    sig { returns(T.nilable(::DateTime)) }
    def scheduled_at_was; end

    sig { void }
    def scheduled_at_will_change!; end

    sig { returns(T.untyped) }
    def serialized_params; end

    sig { params(value: T.untyped).returns(T.untyped) }
    def serialized_params=(value); end

    sig { returns(T::Boolean) }
    def serialized_params?; end

    sig { returns(T.untyped) }
    def serialized_params_before_last_save; end

    sig { returns(T.untyped) }
    def serialized_params_before_type_cast; end

    sig { returns(T::Boolean) }
    def serialized_params_came_from_user?; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def serialized_params_change; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def serialized_params_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def serialized_params_changed?; end

    sig { returns(T.untyped) }
    def serialized_params_in_database; end

    sig { returns(T.nilable([T.untyped, T.untyped])) }
    def serialized_params_previous_change; end

    sig { returns(T::Boolean) }
    def serialized_params_previously_changed?; end

    sig { returns(T.untyped) }
    def serialized_params_previously_was; end

    sig { returns(T.untyped) }
    def serialized_params_was; end

    sig { void }
    def serialized_params_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_active_job_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_concurrency_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cron_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_cron_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_error?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_finished_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_performed_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_priority?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_queue_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_retried_good_job_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scheduled_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_serialized_params?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active_job_id(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def advisory_lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def advisory_locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def advisory_unlocked(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def dead(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def display_all(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def finished(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def head(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def job_class(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins_advisory_locks(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only_scheduled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def owns_advisory_locked(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def priority_ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def queue_string(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def running(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def schedule_ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def search_text(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unfinished(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    sig { returns(T::Array[::GoodJob::Job]) }
    def to_ary; end

    Elem = type_member(fixed: ::GoodJob::Job)
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end

    Elem = type_member(fixed: ::GoodJob::Job)
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    sig { params(records: T.any(::GoodJob::Job, T::Enumerable[T.any(::GoodJob::Job, T::Enumerable[::GoodJob::Job])])).returns(PrivateCollectionProxy) }
    def <<(*records); end

    sig { params(records: T.any(::GoodJob::Job, T::Enumerable[T.any(::GoodJob::Job, T::Enumerable[::GoodJob::Job])])).returns(PrivateCollectionProxy) }
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig { params(records: T.any(::GoodJob::Job, T::Enumerable[T.any(::GoodJob::Job, T::Enumerable[::GoodJob::Job])])).returns(PrivateCollectionProxy) }
    def concat(*records); end

    sig { params(records: T.any(::GoodJob::Job, Integer, String, T::Enumerable[T.any(::GoodJob::Job, Integer, String, T::Enumerable[::GoodJob::Job])])).returns(T::Array[::GoodJob::Job]) }
    def delete(*records); end

    sig { params(records: T.any(::GoodJob::Job, Integer, String, T::Enumerable[T.any(::GoodJob::Job, Integer, String, T::Enumerable[::GoodJob::Job])])).returns(T::Array[::GoodJob::Job]) }
    def destroy(*records); end

    sig { returns(T::Array[::GoodJob::Job]) }
    def load_target; end

    sig { params(records: T.any(::GoodJob::Job, T::Enumerable[T.any(::GoodJob::Job, T::Enumerable[::GoodJob::Job])])).returns(PrivateCollectionProxy) }
    def prepend(*records); end

    sig { params(records: T.any(::GoodJob::Job, T::Enumerable[T.any(::GoodJob::Job, T::Enumerable[::GoodJob::Job])])).returns(PrivateCollectionProxy) }
    def push(*records); end

    sig { params(other_array: T.any(::GoodJob::Job, T::Enumerable[T.any(::GoodJob::Job, T::Enumerable[::GoodJob::Job])])).returns(T::Array[::GoodJob::Job]) }
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::GoodJob::Job]) }
    def target; end

    sig { returns(T::Array[::GoodJob::Job]) }
    def to_ary; end

    Elem = type_member(fixed: ::GoodJob::Job)
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    sig { returns(T::Array[::GoodJob::Job]) }
    def to_ary; end

    Elem = type_member(fixed: ::GoodJob::Job)
  end

  class PrivateRelationWhereChain < PrivateRelation
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end

    Elem = type_member(fixed: ::GoodJob::Job)
  end
end
