# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gretel` gem.
# Please instead update this file by running `bin/tapioca gem gretel`.

module Gretel
  extend ::Gretel::Resettable

  class << self
    # Returns the path from with breadcrumbs are loaded. Default is +config/breadcrumbs.rb+
    # in the app and all loaded engines. Breadcrumbs set in the app will override
    # breadcrumbs set in engines.
    def breadcrumb_paths; end

    # Sets the path from with breadcrumbs are loaded. Default is +config/breadcrumbs.rb+.
    def breadcrumb_paths=(paths); end

    # Yields this +Gretel+ to be configured.
    #
    #   Gretel.configure do |config|
    #     config.reload_environments << "staging"
    #   end
    #
    # @yield [_self]
    # @yieldparam _self [Gretel] the object that the method was called on
    def configure; end

    # Registers a style for later use.
    #
    #   Gretel.register_style :ul, { container_tag: :ul, fragment_tag: :li }
    def register_style(style, options); end

    # Array of Rails environment names with automatic configuration reload. Default is +["development"]+.
    def reload_environments; end

    # Sets the Rails environment names with automatic configuration reload. Default is +["development"]+.
    def reload_environments=(_arg0); end
  end
end

class Gretel::Crumb
  # Initializes a new crumb from the given +key+.
  # It finds the breadcrumb created in +Gretel::Crumbs.layout+ and renders the block using the arguments supplied in +args+.
  #
  # @raise [ArgumentError]
  # @return [Crumb] a new instance of Crumb
  def initialize(context, key, *args); end

  # The current view context.
  def context; end

  # Key of the breadcrumb.
  def key; end

  # Sets link of the breadcrumb.
  # You can supply an optional options hash that will be available on the links
  # so you can pass info when rendering the breadcrumbs manually.
  #
  #   link "My Link", my_link_path
  #   link "Without URL"
  #   link "With Options", my_path, title: "Test", other: "Some other value"
  def link(*args); end

  # Holds all of the breadcrumb's links as a breadcrumb can have multiple links.
  def links; end

  # Proxy to view context.
  def method_missing(method, *args, **_arg2, &block); end

  # Sets or gets the parent breadcrumb.
  # If you supply a parent key and optional arguments, it will set the parent.
  # If nothing is supplied, it will return the parent, if this has been set.
  #
  # Example:
  #   parent :category, category
  #
  # Or short, which will infer the key from the model's `model_name`:
  #   parent category
  def parent(*args); end
end

module Gretel::Crumbs
  extend ::Gretel::Resettable

  class << self
    # List of breadcrumb configuration files.
    def breadcrumb_files; end

    # Returns true if a crumb with the given key has been set.
    #
    # @return [Boolean]
    def crumb_defined?(key); end

    # Returns a hash of all stored crumb blocks.
    def crumbs; end

    # Loads the breadcrumb configuration files.
    def load_breadcrumbs; end

    # Returns true if the breadcrumb configuration files have been loaded.
    #
    # @return [Boolean]
    def loaded?; end

    # Returns true if a breadcrumbs reload is needed based on configuration file changes.
    #
    # @return [Boolean]
    def reload?; end

    # Reloads the breadcrumb configuration files if they have changed.
    def reload_if_needed; end

    private

    def loaded_file_mtimes; end
  end
end

class Gretel::Link
  # @return [Link] a new instance of Link
  def initialize(key, text, url, options = T.unsafe(nil)); end

  # Sets current so +current?+ will return +true+.
  def current!; end

  # Returns +true+ if this is the last link in the breadcrumb trail.
  #
  # @return [Boolean]
  def current?; end

  # Returns the value of attribute key.
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  def key=(_arg0); end

  # Enables accessors and predicate methods for values in the +options+ hash.
  # This can be used to pass information to links when rendering breadcrumbs
  # manually.
  #
  #   link = Link.new(:my_crumb, "My Crumb", my_path, title: "Test Title", other_value: "Other")
  #   link.title?       # => true
  #   link.title        # => "Test Title"
  #   link.other_value? # => true
  #   link.other_value  # => "Other"
  #   link.some_other?  # => false
  #   link.some_other   # => nil
  def method_missing(method, *args, &block); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  # Returns the value of attribute text.
  def text; end

  # Sets the attribute text
  #
  # @param value the value to set the attribute text to.
  def text=(_arg0); end

  # Returns the value of attribute url.
  def url; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  def url=(_arg0); end
end

class Gretel::Railtie < ::Rails::Railtie; end

class Gretel::Renderer
  extend ::Gretel::Resettable

  # @return [Renderer] a new instance of Renderer
  def initialize(context, breadcrumb_key, *breadcrumb_args); end

  # Returns the parent breadcrumb.
  def parent_breadcrumb(options = T.unsafe(nil)); end

  # Renders the breadcrumbs HTML.
  def render(options); end

  # Yields the parent breadcrumb if any.
  def yield_parent_breadcrumb(options = T.unsafe(nil)); end

  private

  # Returns the value of attribute breadcrumb_args.
  def breadcrumb_args; end

  # Returns the value of attribute breadcrumb_key.
  def breadcrumb_key; end

  # Returns the value of attribute context.
  def context; end

  # Array of links for the path of the breadcrumb.
  # Also reloads the breadcrumb configuration if needed.
  def links; end

  # Array of links with applied options.
  def links_for_render(options = T.unsafe(nil)); end

  # Proxy to view context.
  def method_missing(method, *args, &block); end

  # Returns merged options for rendering breadcrumbs.
  def options_for_render(options = T.unsafe(nil)); end

  # Returns options for the given +style_key+ and raises an exception if it's not found.
  def options_for_style(style_key); end

  # Returns parent links for the crumb.
  def parent_links_for(crumb); end

  class << self
    # Registers a style for later use.
    #
    #   Gretel::Renderer.register_style :ul, { container_tag: :ul, fragment_tag: :li }
    def register_style(style_key, options); end

    # Hash of registered styles.
    def styles; end
  end
end

class Gretel::Renderer::Base
  # @return [Base] a new instance of Base
  def initialize(context, options); end

  # Returns the value of attribute context.
  def context; end

  # Returns the value of attribute options.
  def options; end

  def render_container(html); end
  def render_current_fragment(link, position); end
  def render_fragment(link, position); end
  def render_fragment_tag(fragment_tag, text, url, position, options = T.unsafe(nil)); end
  def render_posttext; end
  def render_pretext; end

  private

  # Proxy for +context.link_to+ that can be overridden by plugins.
  def breadcrumb_link_to(name, url, options = T.unsafe(nil)); end

  def fragment_options; end
  def fragment_tag; end
  def join_classes(*classes); end

  # Proxy to view context.
  def method_missing(method, *args, &block); end
end

Gretel::Renderer::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)
Gretel::Renderer::DEFAULT_STYLES = T.let(T.unsafe(nil), Hash)

class Gretel::Renderer::LinkCollection < ::Array
  # @return [LinkCollection] a new instance of LinkCollection
  def initialize(context, links, options = T.unsafe(nil)); end

  # Returns the value of attribute context.
  def context; end

  # Avoid unnecessary html escaping by template engines.
  #
  # @return [Boolean]
  def html_safe?; end

  # Helper for returning all link keys to allow for simple testing.
  def keys; end

  # Returns the value of attribute links.
  def links; end

  # Returns the value of attribute options.
  def options; end

  # Renders the links into breadcrumbs.
  def render; end

  # Returns a hash matching the JSON-LD Structured Data schema
  # https://developers.google.com/search/docs/data-types/breadcrumb#json-ld
  def structured_data(url_base:); end

  # Renders the links into breadcrumbs.
  def to_s; end
end

class Gretel::Renderer::NonSemanticRenderer < ::Gretel::Renderer::Base
  def render_container(html); end
  def render_fragment_tag(fragment_tag, text, url, position, options = T.unsafe(nil)); end
end

class Gretel::Renderer::SemanticRenderer < ::Gretel::Renderer::Base
  def render_container(html); end
  def render_fragment_tag(fragment_tag, text, url, position, options = T.unsafe(nil)); end
end

module Gretel::Resettable
  # Resets all instance variables and calls +reset!+ on all child modules and
  # classes. Used for testing.
  def reset!; end
end

Gretel::VERSION = T.let(T.unsafe(nil), String)

module Gretel::ViewHelpers
  # Sets the current breadcrumb to be rendered elsewhere. Put it somewhere in the view, preferably in the top, before you render any breadcrumbs HTML:
  #
  #   <% breadcrumb :category, @category %>
  #
  # If you pass an instance of an object that responds to +model_name+ (like an ActiveRecord model instance), the breadcrumb can be automatically inferred, so a shortcut for the above would be:
  #
  #   <% breadcrumb @category %>
  def breadcrumb(key = T.unsafe(nil), *args); end

  # Renders the breadcrumbs HTML, for example in your layout. See the readme for default options.
  #   <%= breadcrumbs pretext: "You are here: " %>
  #
  # If you supply a block, it will yield an array with the breadcrumb links so you can build the breadcrumbs HTML manually:
  #   <% breadcrumbs do |links| %>
  #     <% if links.any? %>
  #       You are here:
  #       <% links.each do |link| %>
  #         <%= link_to link.text, link.url %> (<%= link.key %>)
  #       <% end %>
  #     <% end %>
  #   <% end %>
  def breadcrumbs(options = T.unsafe(nil)); end

  # Returns or yields parent breadcrumb (second-to-last in the trail) if it is present.
  #
  #   <% parent_breadcrumb do |link| %>
  #     <%= link_to link.text, link.url %> (<%= link.key %>)
  #   <% end %>
  def parent_breadcrumb(options = T.unsafe(nil), &block); end

  # Yields a block where inside the block you have a different breadcrumb than outside.
  #
  #   <% breadcrumb :about %>
  #
  #   <%= breadcrumbs # shows the :about breadcrumb %>
  #
  #   <% with_breadcrumb :product, Product.first do %>
  #     <%= breadcrumbs # shows the :product breadcrumb %>
  #   <% end %>
  #
  #   <%= breadcrumbs # shows the :about breadcrumb %>
  def with_breadcrumb(key, *args, &block); end

  private

  # Reference to the Gretel breadcrumbs renderer.
  def gretel_renderer; end
end
