# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `net-protocol` gem.
# Please instead update this file by running `bin/tapioca gem net-protocol`.

class Net::BufferedIO
  def initialize(io, read_timeout: T.unsafe(nil), write_timeout: T.unsafe(nil), continue_timeout: T.unsafe(nil), debug_output: T.unsafe(nil)); end

  def <<(*strs); end
  def close; end
  def closed?; end

  # Returns the value of attribute continue_timeout.
  def continue_timeout; end

  # Sets the attribute continue_timeout
  def continue_timeout=(_arg0); end

  # Returns the value of attribute debug_output.
  def debug_output; end

  # Sets the attribute debug_output
  def debug_output=(_arg0); end

  def eof?; end
  def inspect; end

  # Returns the value of attribute io.
  def io; end

  def read(len, dest = T.unsafe(nil), ignore_eof = T.unsafe(nil)); end
  def read_all(dest = T.unsafe(nil)); end

  # Returns the value of attribute read_timeout.
  def read_timeout; end

  # Sets the attribute read_timeout
  def read_timeout=(_arg0); end

  def readline; end
  def readuntil(terminator, ignore_eof = T.unsafe(nil)); end
  def write(*strs); end

  # Returns the value of attribute write_timeout.
  def write_timeout; end

  # Sets the attribute write_timeout
  def write_timeout=(_arg0); end

  def writeline(str); end

  private

  def LOG(msg); end
  def LOG_off; end
  def LOG_on; end
  def rbuf_consume(len); end
  def rbuf_fill; end
  def write0(*strs); end
  def writing; end
end

class Net::InternetMessageIO < ::Net::BufferedIO
  def initialize(*_arg0, **_arg1); end

  # *library private* (cannot handle 'break')
  def each_list_item; end

  # Read
  def each_message_chunk; end

  # Write
  def write_message(src); end

  def write_message_0(src); end
  def write_message_by_block(&block); end

  private

  def buffer_filling(buf, src); end
  def dot_stuff(s); end
  def each_crlf_line(src); end
  def using_each_crlf_line; end
end

Net::NetPrivate::Socket = Net::InternetMessageIO
Net::ProtocRetryError = Net::ProtoRetriableError

class Net::Protocol
  private

  def ssl_socket_connect(s, timeout); end

  class << self
    def protocol_param(name, val); end
  end
end

Net::Protocol::VERSION = T.let(T.unsafe(nil), String)

class Net::ReadAdapter
  def initialize(block); end

  def <<(str); end
  def inspect; end

  private

  # This method is needed because @block must be called by yield,
  # not Proc#call.  You can see difference when using `break' in
  # the block.
  def call_block(str); end
end

# ReadTimeout, a subclass of Timeout::Error, is raised if a chunk of the
# response cannot be read within the read_timeout.
class Net::ReadTimeout < ::Timeout::Error
  def initialize(io = T.unsafe(nil)); end

  # Returns the value of attribute io.
  def io; end

  def message; end
end

# The writer adapter class
class Net::WriteAdapter
  def initialize(writer); end

  def <<(str); end
  def inspect; end
  def print(str); end
  def printf(*args); end
  def puts(str = T.unsafe(nil)); end
  def write(str); end
end

# WriteTimeout, a subclass of Timeout::Error, is raised if a chunk of the
# response cannot be written within the write_timeout.  Not raised on Windows.
class Net::WriteTimeout < ::Timeout::Error
  def initialize(io = T.unsafe(nil)); end

  # Returns the value of attribute io.
  def io; end

  def message; end
end
