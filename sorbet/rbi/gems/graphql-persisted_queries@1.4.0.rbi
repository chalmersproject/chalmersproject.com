# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql-persisted_queries` gem.
# Please instead update this file by running `bin/tapioca gem graphql-persisted_queries`.

module GraphQL
  class << self
    def const_missing(const_name); end
    def default_parser; end
    def default_parser=(_arg0); end
    def parse(graphql_string, tracer: T.unsafe(nil)); end
    def parse_file(filename); end
    def parse_with_racc(string, filename: T.unsafe(nil), tracer: T.unsafe(nil)); end
    def scan(graphql_string); end
    def scan_with_ragel(graphql_string); end
  end
end

GraphQL::DEPRECATED_BOOLEAN_TYPE = T.let(T.unsafe(nil), GraphQL::ScalarType)
GraphQL::DEPRECATED_FLOAT_TYPE = T.let(T.unsafe(nil), GraphQL::ScalarType)
GraphQL::DEPRECATED_ID_TYPE = T.let(T.unsafe(nil), GraphQL::ScalarType)
GraphQL::DEPRECATED_INT_TYPE = T.let(T.unsafe(nil), GraphQL::ScalarType)
GraphQL::DEPRECATED_STRING_TYPE = T.let(T.unsafe(nil), GraphQL::ScalarType)

# Plugin definition
module GraphQL::PersistedQueries
  class << self
    def configure_compiled_queries; end
    def use(schema_defn, **options); end
  end
end

module GraphQL::PersistedQueries::Analyzers; end

# Verifies that mutations are not executed using GET requests
class GraphQL::PersistedQueries::Analyzers::HttpMethodValidator
  def initialize(query); end

  def perform; end
end

# Contains factory methods for error handlers
module GraphQL::PersistedQueries::BuilderHelpers
  class << self
    def camelize(name); end
  end
end

module GraphQL::PersistedQueries::CompiledQueries; end

# Patches GraphQL::Execution::Multiplex to support compiled queries
module GraphQL::PersistedQueries::CompiledQueries::MultiplexPatch
  def add_not_found_error(query); end
  def begin_query(results, idx, query, multiplex); end
end

# Patches GraphQL::Query to support compiled queries
module GraphQL::PersistedQueries::CompiledQueries::QueryPatch
  def persisted_query_not_found?; end
  def prepare_ast; end

  private

  def resolver; end
end

# Fetches and persists compiled query
class GraphQL::PersistedQueries::CompiledQueries::Resolver
  include ::GraphQL::PersistedQueries::ResolverHelpers

  def initialize(schema, extensions); end

  def fetch; end
  def persist(query_string, compiled_query); end
end

# Contains factory methods for error handlers
module GraphQL::PersistedQueries::ErrorHandlers
  class << self
    def build(handler, **options); end
    def build_by_name(name, **options); end
    def build_from_proc(proc); end
  end
end

# Base class for all error handlers
class GraphQL::PersistedQueries::ErrorHandlers::BaseErrorHandler
  def initialize(**_options); end

  def call(_error); end
end

# Default error handler for simply re-raising the error
class GraphQL::PersistedQueries::ErrorHandlers::DefaultErrorHandler < ::GraphQL::PersistedQueries::ErrorHandlers::BaseErrorHandler
  def call(error); end
end

# Builds hash generator
class GraphQL::PersistedQueries::HashGeneratorBuilder
  def initialize(generator); end

  def build; end

  private

  def build_from_name; end
  def build_from_proc; end
end

# Resolves multiplex query
class GraphQL::PersistedQueries::MultiplexResolver
  def initialize(schema, queries, **kwargs); end

  def resolve; end

  private

  def perform_multiplex; end
  def resolve_persisted_queries; end
  def resolve_persisted_query(query_params, pos); end
  def results; end
end

# Raised when persisted query is not found in the storage
class GraphQL::PersistedQueries::NotFound < ::StandardError
  def message; end
end

# Fetches or stores query string in the storage
class GraphQL::PersistedQueries::Resolver
  include ::GraphQL::PersistedQueries::ResolverHelpers

  def initialize(extensions, schema); end

  def resolve(query_string); end

  private

  def persist_query(query_string); end
end

# Helper functions for resolvers
module GraphQL::PersistedQueries::ResolverHelpers
  private

  def hash; end
  def validate_hash!(query_string); end
  def with_error_handling; end

  class << self
    def hash; end
    def validate_hash!(query_string); end
    def with_error_handling; end
  end
end

# Patches GraphQL::Schema to support persisted queries
module GraphQL::PersistedQueries::SchemaPatch
  def configure_persisted_query_error_handler(handler); end
  def configure_persisted_query_store(store, **options); end
  def hash_generator=(hash_generator); end
  def hash_generator_proc; end

  # Sets the attribute persisted_queries_tracing_enabled
  def persisted_queries_tracing_enabled=(_arg0); end

  def persisted_queries_tracing_enabled?; end
  def persisted_query_error_handler; end
  def persisted_query_store; end
  def tracer(name); end
  def verify_http_method=(verify); end

  private

  def prepare_analyzer; end

  class << self
    def patch(schema, compiled_queries); end
  end
end

# Patches GraphQL::Schema to override multiplex (not needed for compiled queries)
module GraphQL::PersistedQueries::SchemaPatch::MultiplexPatch
  def multiplex(queries, **kwargs); end
end

# Contains factory methods for store adapters
module GraphQL::PersistedQueries::StoreAdapters
  class << self
    def build(adapter, **options); end
    def build_by_name(name, **options); end
  end
end

# Base class for all store adapters
class GraphQL::PersistedQueries::StoreAdapters::BaseStoreAdapter
  include ::GraphQL::Tracing::Traceable

  def initialize(**_options); end

  def fetch_query(hash, compiled_query: T.unsafe(nil)); end
  def save_query(hash, query, compiled_query: T.unsafe(nil)); end

  # Sets the attribute tracers
  def tracers=(_arg0); end

  protected

  def fetch(_hash); end
  def save(_hash, _query); end
  def trace(key, metadata); end

  private

  def build_key(hash, compiled_query); end
end

# Builds Redis object instance based on passed hash
class GraphQL::PersistedQueries::StoreAdapters::MemcachedClientBuilder
  def initialize(memcached_url: T.unsafe(nil), memcached_host: T.unsafe(nil), memcached_port: T.unsafe(nil), **dalli_args); end

  def build; end

  private

  def build_memcached_url; end
end

# Redis adapter for storing persisted queries
class GraphQL::PersistedQueries::StoreAdapters::MemcachedStoreAdapter < ::GraphQL::PersistedQueries::StoreAdapters::BaseStoreAdapter
  def initialize(dalli_client:, expiration: T.unsafe(nil), namespace: T.unsafe(nil)); end

  protected

  def fetch(hash); end
  def save(hash, query); end

  private

  def build_dalli_proc(dalli_client); end
  def key_for(hash); end
end

GraphQL::PersistedQueries::StoreAdapters::MemcachedStoreAdapter::DEFAULT_EXPIRATION = T.let(T.unsafe(nil), Integer)
GraphQL::PersistedQueries::StoreAdapters::MemcachedStoreAdapter::DEFAULT_NAMESPACE = T.let(T.unsafe(nil), String)

# Memory adapter for storing persisted queries
class GraphQL::PersistedQueries::StoreAdapters::MemoryStoreAdapter < ::GraphQL::PersistedQueries::StoreAdapters::BaseStoreAdapter
  def initialize(**_options); end

  protected

  def fetch(hash); end
  def save(hash, query); end
end

# Builds Redis object instance based on passed hash
class GraphQL::PersistedQueries::StoreAdapters::RedisClientBuilder
  def initialize(redis_url: T.unsafe(nil), redis_host: T.unsafe(nil), redis_port: T.unsafe(nil), redis_db_name: T.unsafe(nil)); end

  def build; end

  private

  def build_redis_url; end
end

GraphQL::PersistedQueries::StoreAdapters::RedisClientBuilder::DEFAULT_REDIS_DB = T.let(T.unsafe(nil), String)

# Redis adapter for storing persisted queries
class GraphQL::PersistedQueries::StoreAdapters::RedisStoreAdapter < ::GraphQL::PersistedQueries::StoreAdapters::BaseStoreAdapter
  def initialize(redis_client: T.unsafe(nil), expiration: T.unsafe(nil), namespace: T.unsafe(nil)); end

  protected

  def fetch(hash); end
  def save(hash, query); end

  private

  def build_redis_proc(redis_client); end
  def key_for(hash); end
end

GraphQL::PersistedQueries::StoreAdapters::RedisStoreAdapter::DEFAULT_EXPIRATION = T.let(T.unsafe(nil), Integer)
GraphQL::PersistedQueries::StoreAdapters::RedisStoreAdapter::DEFAULT_NAMESPACE = T.let(T.unsafe(nil), String)

# Memory adapter for storing persisted queries
class GraphQL::PersistedQueries::StoreAdapters::RedisWithLocalCacheStoreAdapter < ::GraphQL::PersistedQueries::StoreAdapters::BaseStoreAdapter
  def initialize(redis_client: T.unsafe(nil), expiration: T.unsafe(nil), namespace: T.unsafe(nil), redis_adapter_class: T.unsafe(nil), memory_adapter_class: T.unsafe(nil)); end

  # We don't need to implement our own traces for this adapter since the
  # underlying adapters will emit the proper events for us.  However,
  # since tracers can be defined at any time, we need to pass them through.
  def tracers=(tracers); end

  protected

  def fetch(hash); end
  def save(hash, query); end

  private

  # Returns the value of attribute memory_adapter.
  def memory_adapter; end

  # Returns the value of attribute redis_adapter.
  def redis_adapter; end
end

GraphQL::PersistedQueries::StoreAdapters::RedisWithLocalCacheStoreAdapter::DEFAULT_MEMORY_ADAPTER_CLASS = GraphQL::PersistedQueries::StoreAdapters::MemoryStoreAdapter
GraphQL::PersistedQueries::StoreAdapters::RedisWithLocalCacheStoreAdapter::DEFAULT_REDIS_ADAPTER_CLASS = GraphQL::PersistedQueries::StoreAdapters::RedisStoreAdapter
GraphQL::PersistedQueries::VERSION = T.let(T.unsafe(nil), String)

# Raised when provided hash is not matched with query
class GraphQL::PersistedQueries::WrongHash < ::StandardError
  def message; end
end

GraphQL::VERSION = T.let(T.unsafe(nil), String)
