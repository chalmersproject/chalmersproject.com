# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `action_policy-graphql` gem.
# Please instead update this file by running `bin/tapioca gem action_policy-graphql`.

# ActionPolicy is an authorization framework for Ruby/Rails applications.
#
# It provides a way to write access policies and helpers to check these policies
# in your application.
module ActionPolicy
  class << self
    # Returns the value of attribute cache_store.
    def cache_store; end

    # Sets the attribute cache_store
    def cache_store=(_arg0); end

    # Returns the value of attribute enforce_predicate_rules_naming.
    def enforce_predicate_rules_naming; end

    # Sets the attribute enforce_predicate_rules_naming
    def enforce_predicate_rules_naming=(_arg0); end

    # Find a policy class for a target
    def lookup(target, allow_nil: T.unsafe(nil), default: T.unsafe(nil), **options); end
  end
end

# By default cache namespace (or prefix) contains major and minor version of the gem
ActionPolicy::CACHE_NAMESPACE = T.let(T.unsafe(nil), String)

module ActionPolicy::GraphQL
  class << self
    # Whether to raise an exeption if field is not authorized
    # or return `nil`.
    # Defaults to `true`.
    def authorize_raise_exception; end

    # Whether to raise an exeption if field is not authorized
    # or return `nil`.
    # Defaults to `true`.
    def authorize_raise_exception=(_arg0); end

    # Which prefix to use for authorization fields
    # Defaults to `"can_"`
    def default_authorization_field_prefix; end

    # Which prefix to use for authorization fields
    # Defaults to `"can_"`
    def default_authorization_field_prefix=(_arg0); end

    # Which rule to use when no specified (e.g. `authorize: true`)
    # Defaults to `:show?`
    def default_authorize_rule; end

    # Which rule to use when no specified (e.g. `authorize: true`)
    # Defaults to `:show?`
    def default_authorize_rule=(_arg0); end

    # Which rule to use when no specified for preauthorization (e.g. `preauthorize: true`)
    # of a list-like field.
    # Defaults to `:index?`
    def default_preauthorize_list_rule; end

    # Which rule to use when no specified for preauthorization (e.g. `preauthorize: true`)
    # of a list-like field.
    # Defaults to `:index?`
    def default_preauthorize_list_rule=(_arg0); end

    # Which rule to use when no specified for preauthorization (e.g. `preauthorize: true`)
    # of a singleton-like field.
    # Defaults to `:show?`
    def default_preauthorize_node_rule; end

    # Which rule to use when no specified for preauthorization (e.g. `preauthorize: true`)
    # of a singleton-like field.
    # Defaults to `:show?`
    def default_preauthorize_node_rule=(_arg0); end

    def preauthorize_mutation_raise_exception; end

    # Whether to raise an exception if preauthorization fails
    # Equals to preauthorize_raise_exception unless explicitly set
    def preauthorize_mutation_raise_exception=(_arg0); end

    # Whether to raise an exception if preauthorization fails
    # Equals to authorize_raise_exception unless explicitly set
    def preauthorize_raise_exception; end

    # Sets the attribute preauthorize_raise_exception
    def preauthorize_raise_exception=(_arg0); end
  end
end

# Add `authorized` option to the field
#
# Example:
#
# class PostType < ::GraphQL::Schema::Object
# field :comments, null: false, authorized: true
#
# # or with options
# field :comments, null: false, authorized: { type: :relation, with: MyPostPolicy }
# end
module ActionPolicy::GraphQL::AuthorizedField
  def initialize(*args, preauthorize: T.unsafe(nil), authorize: T.unsafe(nil), authorized_scope: T.unsafe(nil), authorize_field: T.unsafe(nil), **kwargs, &block); end

  private

  def add_extension!(extensions, extension_class, options); end
end

class ActionPolicy::GraphQL::AuthorizedField::AuthorizeExtension < ::ActionPolicy::GraphQL::AuthorizedField::Extension
  def after_resolve(value:, context:, object:, **_rest); end
  def apply; end

  class << self
    def show_authorize_mutation_deprecation; end
  end
end

ActionPolicy::GraphQL::AuthorizedField::AuthorizeExtension::DEPRECATION_MESSAGE = T.let(T.unsafe(nil), String)

class ActionPolicy::GraphQL::AuthorizedField::AuthorizeFieldExtension < ::ActionPolicy::GraphQL::AuthorizedField::Extension
  def apply; end
  def resolve(context:, object:, arguments:, **_rest); end

  private

  def underscored_field_name; end
end

class ActionPolicy::GraphQL::AuthorizedField::Extension < ::GraphQL::Schema::FieldExtension
  def extract_option(key, &default); end
end

class ActionPolicy::GraphQL::AuthorizedField::PreauthorizeExtension < ::ActionPolicy::GraphQL::AuthorizedField::Extension
  def apply; end
  def resolve(context:, object:, arguments:, **_rest); end
end

class ActionPolicy::GraphQL::AuthorizedField::ScopeExtension < ::ActionPolicy::GraphQL::AuthorizedField::Extension
  def resolve(context:, object:, arguments:, **_rest); end
end

module ActionPolicy::GraphQL::Behaviour
  include ::ActionPolicy::Behaviour
  include ::ActionPolicy::Behaviours::ThreadMemoized
  include ::ActionPolicy::Behaviours::Memoized
  include ::ActionPolicy::Behaviours::Namespaced

  mixes_in_class_methods ::ActionPolicy::Behaviour::ClassMethods
  mixes_in_class_methods ::ActionPolicy::Behaviour
  mixes_in_class_methods ::ActionPolicy::Behaviours::ThreadMemoized
  mixes_in_class_methods ::ActionPolicy::Behaviours::Memoized
  mixes_in_class_methods ::ActionPolicy::Behaviours::Namespaced

  def current_user; end

  class << self
    # When used with self.authorized?
    def extended(base); end

    def included(base); end
  end
end

# Add DSL to add policy rules as fields
#
# Example:
#
# class PostType < ::GraphQL::Schema::Object
# # Adds can_edit, can_destroy fields with
# # AuthorizationResult type.
#
# expose_authorization_rules :edit?, :destroy?, prefix: "can_"
# end
#
# Prefix is "can_" by default.
module ActionPolicy::GraphQL::Fields
  mixes_in_class_methods ::ActionPolicy::GraphQL::Fields::ClassMethods

  class << self
    def included(base); end
  end
end

module ActionPolicy::GraphQL::Fields::ClassMethods
  def expose_authorization_rules(*rules, field_name: T.unsafe(nil), prefix: T.unsafe(nil), field_options: T.unsafe(nil), **options); end
end

module ActionPolicy::GraphQL::Types; end

class ActionPolicy::GraphQL::Types::AuthorizationResult < ::GraphQL::Schema::Object
  def message; end
  def reasons; end
end

class ActionPolicy::GraphQL::Types::AuthorizationResult::InvalidNullError < ::GraphQL::InvalidNullError; end

class ActionPolicy::GraphQL::Types::FailureReasons < ::GraphQL::Schema::Object
  def details; end
end

class ActionPolicy::GraphQL::Types::FailureReasons::InvalidNullError < ::GraphQL::InvalidNullError; end
ActionPolicy::VERSION = T.let(T.unsafe(nil), String)
