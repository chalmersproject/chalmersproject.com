# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails_admin` gem.
# Please instead update this file by running `bin/tapioca gem rails_admin`.

module ActionController::Base::HelperMethods
  def alert(*args, &block); end
  def combined_fragment_cache_key(*args, &block); end
  def content_security_policy?(*args, &block); end
  def content_security_policy_nonce(*args, &block); end
  def cookies(*args, &block); end
  def form_authenticity_token(*args, &block); end
  def notice(*args, &block); end
  def protect_against_forgery?(*args, &block); end
  def view_cache_dependencies(*args, &block); end
end

module RailsAdmin
  class << self
    # Extend RailsAdmin
    #
    # The extension may define various adapters (e.g., for authorization) and
    # register those via the options hash.
    def add_extension(extension_key, extension_definition, options = T.unsafe(nil)); end

    # Setup RailsAdmin
    #
    # Given the first argument is a model class, a model class name
    # or an abstract model object proxies to model configuration method.
    #
    # If only a block is passed it is stored to initializer stack to be evaluated
    # on first request in production mode and on each request in development. If
    # initialization has already occured (in other words RailsAdmin.setup has
    # been called) the block will be added to stack and evaluated at once.
    #
    # Otherwise returns RailsAdmin::Config class.
    def config(entity = T.unsafe(nil), &block); end

    def railtie_helpers_paths; end
    def railtie_namespace; end
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # Setup all extensions for testing
    def setup_all_extensions; end

    def table_name_prefix; end
    def use_relative_model_naming?; end
    def yaml_dump(object); end
    def yaml_load(yaml); end
  end
end

RailsAdmin::AUDITING_ADAPTERS = T.let(T.unsafe(nil), Hash)
RailsAdmin::AUTHORIZATION_ADAPTERS = T.let(T.unsafe(nil), Hash)

class RailsAdmin::AbstractModel
  def initialize(model_or_model_name); end

  # Returns the value of attribute adapter.
  def adapter; end

  def all; end
  def all=(val); end
  def config; end
  def each_associated_children(object); end

  # do not store a reference to the model, does not play well with ActiveReload/Rails3.2
  def model; end

  # Returns the value of attribute model_name.
  def model_name; end

  def param_key; end
  def pretty_name; end
  def to_param; end
  def to_s; end
  def where(conditions); end

  private

  def initialize_active_record; end
  def initialize_mongoid; end
  def parse_field_value(field, value); end

  class << self
    def all(adapter = T.unsafe(nil)); end
    def all=(val); end
    def new(m); end
    def old_new(*_arg0); end
    def polymorphic_parents(adapter, model_name, name); end
    def reset; end

    # For testing
    def reset_polymorphic_parents; end
  end
end

class RailsAdmin::AbstractModel::StatementBuilder
  def initialize(column, type, value, operator); end

  def to_statement; end

  protected

  def build_statement_for_date; end
  def build_statement_for_datetime_or_timestamp; end
  def build_statement_for_integer_decimal_or_float; end
  def build_statement_for_type; end
  def build_statement_for_type_generic; end
  def get_filtering_duration; end
  def range_filter(_min, _max); end
  def unary_operators; end
end

class RailsAdmin::AbstractModel::StatementBuilder::FilteringDuration
  def initialize(operator, value); end

  def between; end
  def default; end
  def get_duration; end
  def last_week; end
  def this_week; end
  def today; end
  def yesterday; end

  private

  def default_date; end
end

class RailsAdmin::ActionNotAllowed < ::StandardError; end

class RailsAdmin::ApplicationController < ::ActionController::Base
  include ::RailsAdmin::Extensions::ControllerExtension

  def _current_user; end
  def abstract_model; end
  def authorization_adapter; end
  def get_model; end
  def get_object; end
  def model_config; end
  def object; end
  def to_model_name(param); end

  private

  def _audit!; end
  def _authenticate!; end
  def _authorize!; end
  def _get_plugin_name; end
  def _layout(lookup_context, formats); end
  def rails_admin_controller?; end

  class << self
    def __callbacks; end
    def _helper_methods; end
    def middleware_stack; end
    def rescue_handlers; end
  end
end

# module RailsAdmin::ApplicationController::HelperMethods
#   include ::ActionController::Base::HelperMethods

#   def _current_user(*args, &block); end
#   def _get_plugin_name(*args, &block); end
# end

module RailsAdmin::ApplicationHelper
  def action(key, abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
  def actions(scope = T.unsafe(nil), abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
  def authorized?(action_name, abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
  def breadcrumb(action = T.unsafe(nil), _acc = T.unsafe(nil)); end
  def bulk_menu(abstract_model = T.unsafe(nil)); end
  def current_action?(action, abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
  def edit_user_link; end
  def flash_alert_class(flash_key); end
  def handle_asset_dependency_error; end
  def logout_method; end
  def logout_path; end
  def main_navigation; end
  def menu_for(parent, abstract_model = T.unsafe(nil), object = T.unsafe(nil), only_icon = T.unsafe(nil)); end
  def navigation(parent_groups, nodes, level = T.unsafe(nil)); end
  def root_navigation; end
  def static_navigation; end
  def wording_for(label, action = T.unsafe(nil), abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
end

RailsAdmin::CONFIGURATION_ADAPTERS = T.let(T.unsafe(nil), Hash)

class RailsAdmin::CSVConverter
  def initialize(objects = T.unsafe(nil), schema = T.unsafe(nil)); end

  def to_csv(options = T.unsafe(nil)); end

  private

  def export_field_for(method, model_config = T.unsafe(nil)); end
  def generate_csv_header; end
  def generate_csv_row(object); end
  def generate_csv_string(options); end
end

module RailsAdmin::Config
  class << self
    # Setup actions to be used.
    def actions(&block); end

    # Evaluate the given block either immediately or lazily, based on initialization status.
    def apply(&block); end

    # Set where RailsAdmin fetches JS/CSS from, defaults to :sprockets
    def asset_source; end

    # Set where RailsAdmin fetches JS/CSS from, defaults to :sprockets
    def asset_source=(_arg0); end

    # Setup auditing/versioning provider that observe objects lifecycle
    def audit_with(*args, &block); end

    # Setup authentication to be run as a before filter
    # This is run inside the controller instance so you can setup any authentication you need to
    #
    # By default, the authentication will run via warden if available
    # and will run the default.
    #
    # If you use devise, this will authenticate the same as _authenticate_user!_
    def authenticate_with(&blk); end

    # Setup authorization to be run as a before filter
    # This is run inside the controller instance so you can setup any authorization you need to.
    #
    # By default, there is no authorization.
    #
    # To use an authorization adapter, pass the name of the adapter. For example,
    # to use with CanCanCan[https://github.com/CanCanCommunity/cancancan/], pass it like this.
    #
    # See the wiki[https://github.com/railsadminteam/rails_admin/wiki] for more on authorization.
    def authorize_with(*args, &block); end

    # Tell browsers whether to use the native HTML5 validations (novalidate form option).
    def browser_validations; end

    # Tell browsers whether to use the native HTML5 validations (novalidate form option).
    def browser_validations=(_arg0); end

    # hide blank fields in show view if true
    def compact_show_view; end

    # hide blank fields in show view if true
    def compact_show_view=(_arg0); end

    # Setup configuration using an extension-provided ConfigurationAdapter
    def configure_with(extension); end

    # Setup a different method to determine the current user or admin logged in.
    # This is run inside the controller instance and made available as a helper.
    #
    # By default, _request.env["warden"].user_ or _current_user_ will be used.
    def current_user_method(&block); end

    # Default association limit
    def default_associated_collection_limit; end

    # Default association limit
    def default_associated_collection_limit=(_arg0); end

    # Fields to be hidden in show, create and update views
    def default_hidden_fields; end

    # Fields to be hidden in show, create and update views
    def default_hidden_fields=(fields); end

    # Default items per page value used if a model level option has not
    # been configured
    def default_items_per_page; end

    # Default items per page value used if a model level option has not
    # been configured
    def default_items_per_page=(_arg0); end

    # Returns the value of attribute default_search_operator.
    def default_search_operator; end

    def default_search_operator=(operator); end

    # Configuration option to specify which models you want to exclude.
    def excluded_models; end

    # Configuration option to specify which models you want to exclude.
    def excluded_models=(_arg0); end

    # set settings for `protect_from_forgery` method
    # By default, it raises exception upon invalid CSRF tokens
    def forgery_protection_settings; end

    # set settings for `protect_from_forgery` method
    # By default, it raises exception upon invalid CSRF tokens
    def forgery_protection_settings=(_arg0); end

    # Configuration option to specify a allowlist of models you want to RailsAdmin to work with.
    # The excluded_models list applies against the allowlist as well and further reduces the models
    # RailsAdmin will use.
    # If included_models is left empty ([]), then RailsAdmin will automatically use all the models
    # in your application (less any excluded_models you may have specified).
    def included_models; end

    # Configuration option to specify a allowlist of models you want to RailsAdmin to work with.
    # The excluded_models list applies against the allowlist as well and further reduces the models
    # RailsAdmin will use.
    # If included_models is left empty ([]), then RailsAdmin will automatically use all the models
    # in your application (less any excluded_models you may have specified).
    def included_models=(_arg0); end

    # Finish initialization by executing deferred configuration blocks
    def initialize!; end

    # Configuration option to specify which method names will be searched for
    # to be used as a label for object records. This defaults to [:name, :title]
    def label_methods; end

    # Configuration option to specify which method names will be searched for
    # to be used as a label for object records. This defaults to [:name, :title]
    def label_methods=(_arg0); end

    # Application title, can be an array of two elements
    def main_app_name; end

    # Application title, can be an array of two elements
    def main_app_name=(_arg0); end

    # Loads a model configuration instance from the registry or registers
    # a new one if one is yet to be added.
    #
    # First argument can be an instance of requested model, its class object,
    # its class name as a string or symbol or a RailsAdmin::AbstractModel
    # instance.
    #
    # If a block is given it is evaluated in the context of configuration instance.
    #
    # Returns given model's configuration
    def model(entity, &block); end

    # Returns all model configurations
    def models; end

    # pool of all found model names from the whole application
    def models_pool; end

    # Returns the value of attribute navigation_static_label.
    def navigation_static_label; end

    # Sets the attribute navigation_static_label
    def navigation_static_label=(_arg0); end

    # accepts a hash of static links to be shown below the main navigation
    def navigation_static_links; end

    # accepts a hash of static links to be shown below the main navigation
    def navigation_static_links=(_arg0); end

    # set parent controller
    def parent_controller; end

    def parent_controller=(name); end

    # Stores model configuration objects in a hash identified by model's class
    # name.
    def registry; end

    # Perform reset, then load RailsAdmin initializer again
    def reload!; end

    # Reset all configurations to defaults.
    def reset; end

    # Reset a provided model's configuration.
    def reset_model(model); end

    # show Gravatar in Navigation bar
    def show_gravatar; end

    # show Gravatar in Navigation bar
    def show_gravatar=(_arg0); end

    def sidescroll=(_); end
    def total_columns_width=(_); end

    # Get all models that are configured as visible sorted by their weight and label.
    def visible_models(bindings); end

    private

    def lchomp(base, arg); end
    def viable_models; end
    def visible_models_with_bindings(bindings); end
  end
end

module RailsAdmin::Config::Actions
  class << self
    def add_action(key, parent_class, parent, &block); end
    def all(scope = T.unsafe(nil), bindings = T.unsafe(nil)); end
    def bulk_delete(&block); end
    def collection(key, parent_class = T.unsafe(nil), &block); end
    def dashboard(&block); end
    def delete(&block); end
    def edit(&block); end
    def export(&block); end
    def find(custom_key, bindings = T.unsafe(nil)); end
    def history_index(&block); end
    def history_show(&block); end
    def index(&block); end
    def member(key, parent_class = T.unsafe(nil), &block); end
    def new(&block); end
    def register(name, klass = T.unsafe(nil)); end
    def reset; end
    def root(key, parent_class = T.unsafe(nil), &block); end
    def show(&block); end
    def show_in_app(&block); end

    private

    def add_action_custom_key(action, &block); end
    def init_actions!; end
  end
end

class RailsAdmin::Config::Actions::Base
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Hideable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  def action_name(*args, &block); end
  def authorization_key(*args, &block); end
  def authorized(*args, &block); end
  def authorized?; end
  def breadcrumb_parent(*args, &block); end
  def bulkable(*args, &block); end
  def bulkable?; end
  def collection(*args, &block); end
  def collection?; end
  def controller(*args, &block); end
  def custom_key(*args, &block); end
  def enabled(*args, &block); end
  def enabled?; end
  def except(*args, &block); end
  def http_methods(*args, &block); end
  def i18n_key(*args, &block); end

  # Off API.
  def key; end

  def link_icon(*args, &block); end
  def link_target(*args, &block); end
  def member(*args, &block); end
  def member?; end
  def only(*args, &block); end
  def pjax(*args, &block); end
  def pjax?; end
  def root(*args, &block); end
  def root?; end
  def route_fragment(*args, &block); end
  def show_in_menu(*args, &block); end
  def show_in_navigation(*args, &block); end
  def show_in_sidebar(*args, &block); end
  def sidebar_label(*args, &block); end
  def template_name(*args, &block); end
  def visible(*args, &block); end
  def visible?; end

  class << self
    def key; end
  end
end

class RailsAdmin::Config::Actions::BulkDelete < ::RailsAdmin::Config::Actions::Base
  def authorization_key(*args, &block); end
  def bulkable(*args, &block); end
  def bulkable?; end
  def collection(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
end

class RailsAdmin::Config::Actions::Dashboard < ::RailsAdmin::Config::Actions::Base
  def auditing_versions_limit(*args, &block); end
  def breadcrumb_parent(*args, &block); end
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def root(*args, &block); end
  def root?; end
  def route_fragment(*args, &block); end
  def statistics(*args, &block); end
  def statistics?; end
end

class RailsAdmin::Config::Actions::Delete < ::RailsAdmin::Config::Actions::Base
  def authorization_key(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def route_fragment(*args, &block); end
end

class RailsAdmin::Config::Actions::Edit < ::RailsAdmin::Config::Actions::Base
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
end

class RailsAdmin::Config::Actions::Export < ::RailsAdmin::Config::Actions::Base
  def bulkable(*args, &block); end
  def bulkable?; end
  def collection(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
end

class RailsAdmin::Config::Actions::HistoryIndex < ::RailsAdmin::Config::Actions::Base
  def authorization_key(*args, &block); end
  def collection(*args, &block); end
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def route_fragment(*args, &block); end
  def template_name(*args, &block); end
end

class RailsAdmin::Config::Actions::HistoryShow < ::RailsAdmin::Config::Actions::Base
  def authorization_key(*args, &block); end
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def route_fragment(*args, &block); end
  def template_name(*args, &block); end
end

class RailsAdmin::Config::Actions::Index < ::RailsAdmin::Config::Actions::Base
  def breadcrumb_parent(*args, &block); end
  def collection(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
  def route_fragment(*args, &block); end
end

class RailsAdmin::Config::Actions::New < ::RailsAdmin::Config::Actions::Base
  def collection(*args, &block); end
  def controller(*args, &block); end
  def http_methods(*args, &block); end
  def link_icon(*args, &block); end
end

class RailsAdmin::Config::Actions::Show < ::RailsAdmin::Config::Actions::Base
  def breadcrumb_parent(*args, &block); end
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def route_fragment(*args, &block); end
end

class RailsAdmin::Config::Actions::ShowInApp < ::RailsAdmin::Config::Actions::Base
  def controller(*args, &block); end
  def link_icon(*args, &block); end
  def member(*args, &block); end
  def pjax(*args, &block); end
  def pjax?; end
  def visible(*args, &block); end
  def visible?; end
end

# A module for all configurables.
module RailsAdmin::Config::Configurable
  mixes_in_class_methods ::RailsAdmin::Config::Configurable::ClassMethods

  def has_option?(name); end
  def register_deprecated_instance_option(option_name, replacement_option_name = T.unsafe(nil), &custom_error); end

  # Register an instance option for this object only
  def register_instance_option(option_name, &default); end

  private

  def with_recurring(option_name, value_proc, default_proc); end

  class << self
    def included(base); end
  end
end

module RailsAdmin::Config::Configurable::ClassMethods
  # Register a class option. Class option is a configuration
  # option that stores it's value within a class object's instance variable
  # and is accessed by a class method. Both go by the name of the option.
  def register_class_option(option_name, &default); end

  def register_deprecated_instance_option(option_name, replacement_option_name = T.unsafe(nil), scope = T.unsafe(nil)); end

  # Register an instance option. Instance option is a configuration
  # option that stores its value within an instance variable and is
  # accessed by an instance method. Both go by the name of the option.
  def register_instance_option(option_name, scope = T.unsafe(nil), &default); end
end

RailsAdmin::Config::DEFAULT_AUDIT = T.let(T.unsafe(nil), Proc)

# RailsAdmin is setup to try and authenticate with warden
# If warden is found, then it will try to authenticate
#
# This is valid for custom warden setups, and also devise
# If you're using the admin setup for devise, you should set RailsAdmin to use the admin
RailsAdmin::Config::DEFAULT_AUTHENTICATION = T.let(T.unsafe(nil), Proc)

RailsAdmin::Config::DEFAULT_AUTHORIZE = T.let(T.unsafe(nil), Proc)
RailsAdmin::Config::DEFAULT_CURRENT_USER = T.let(T.unsafe(nil), Proc)

module RailsAdmin::Config::Fields
  def default_factory; end

  class << self
    def default_factory; end

    # Build an array of fields by the provided parent object's abstract_model's
    # property and association information. Each property and association is
    # passed to the registered field factories which will populate the fields
    # array that will be returned.
    def factory(parent); end

    # Register a field factory to be included in the factory stack.
    #
    # Factories are invoked lifo (last in first out).
    def register_factory(&block); end
  end
end

class RailsAdmin::Config::Fields::Association < ::RailsAdmin::Config::Fields::Base
  def associated_collection_cache_all(*args, &block); end
  def associated_collection_scope(*args, &block); end

  # Reader for the association's child model's configuration
  def associated_model_config; end

  def associated_model_limit; end

  # Reader for the association's child model object's label method
  def associated_object_label_method; end

  # Reader for associated primary key
  def associated_primary_key; end

  # Reader for the association information hash
  def association; end

  def eager_load(*args, &block); end
  def inline_add(*args, &block); end
  def inline_edit(*args, &block); end
  def inverse_of(*args, &block); end
  def label(*args, &block); end
  def method_name; end

  # has many?
  def multiple?; end

  def nested_form(*args, &block); end

  # Reader whether this is a polymorphic association
  def polymorphic?; end

  def pretty_value(*args, &block); end
  def removable(*args, &block); end
  def removable?; end

  # Reader for the association's value unformatted
  def value; end

  def virtual?; end
  def visible(*args, &block); end
  def visible?; end
end

class RailsAdmin::Config::Fields::Base
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Hideable
  include ::RailsAdmin::Config::Groupable
  include ::RailsAdmin::Config::Inspectable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  def initialize(parent, name, properties); end

  # Returns the value of attribute abstract_model.
  def abstract_model; end

  def active(*args, &block); end
  def active?; end
  def allowed_methods(*args, &block); end

  # Is this an association
  def association?; end

  def children_fields(*args, &block); end
  def column_width(*args, &block); end
  def css_class(*args, &block); end
  def default_filter_operator(*args, &block); end
  def default_value(*args, &block); end

  # Returns the value of attribute defined.
  def defined; end

  # Sets the attribute defined
  def defined=(_arg0); end

  def eager_load(*args, &block); end
  def eager_load?(*args, &block); end
  def eager_load_values; end
  def editable?; end

  # Reader for validation errors of the bound object
  def errors; end

  def export_value(*args, &block); end
  def filterable(*args, &block); end
  def filterable?; end
  def form_default_value; end
  def form_value; end
  def formatted_value(*args, &block); end
  def generic_field_help; end
  def generic_help; end
  def help(*args, &block); end
  def hint(*args, &block); end
  def html_attributes(*args, &block); end
  def inverse_of; end
  def label(*args, &block); end
  def length(*args, &block); end
  def method_name; end

  # Returns the value of attribute name.
  def name; end

  def nested_form(*args, &block); end

  # Inverse accessor whether this field is required.
  def optional(state = T.unsafe(nil), &block); end

  # Writer to make field optional.
  def optional=(state); end

  # Reader whether field is optional.
  def optional?; end

  # Returns the value of attribute order.
  def order; end

  # Sets the attribute order
  def order=(_arg0); end

  # Returns the value of attribute parent.
  def parent; end

  def parse_input(_params); end
  def parse_value(value); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end

  # Returns the value of attribute properties.
  def properties; end

  def queryable(*args, &block); end
  def queryable?; end
  def read_only(*args, &block); end
  def read_only?; end
  def render(*args, &block); end
  def required(*args, &block); end
  def required?; end

  # Returns the value of attribute root.
  def root; end

  def search_operator(*args, &block); end
  def searchable(*args, &block); end
  def searchable_columns(*args, &block); end

  # Returns the value of attribute section.
  def section; end

  # Sets the attribute section
  def section=(_arg0); end

  def serial(*args, &block); end
  def serial?; end
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
  def sortable(*args, &block); end
  def sticky(*args, &block); end
  def sticky?; end

  # Reader for field's type
  def type; end

  def type_css_class; end
  def valid_length(*args, &block); end

  # Reader for field's value
  def value; end

  def view_helper(*args, &block); end
  def virtual?; end
  def visible(*args, &block); end
  def visible?; end
end

RailsAdmin::Config::Fields::Base::NAMED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# A container for groups of fields in edit views
class RailsAdmin::Config::Fields::Group
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Hideable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  def initialize(parent, name); end

  # Returns the value of attribute abstract_model.
  def abstract_model; end

  def active(*args, &block); end
  def active?; end

  # Defines a configuration for a field by proxying parent's field method
  # and setting the field's group as self
  def field(name, type = T.unsafe(nil), &block); end

  # Reader for fields attached to this group
  def fields; end

  # Defines configuration for fields by their type
  def fields_of_type(type, &block); end

  def help(*args, &block); end
  def label(*args, &block); end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute parent.
  def parent; end

  # Returns the value of attribute root.
  def root; end

  # Returns the value of attribute section.
  def section; end

  # Sets the attribute section
  def section=(_arg0); end

  def visible(*args, &block); end
  def visible?; end

  # Reader for fields that are marked as visible
  def visible_fields; end
end

module RailsAdmin::Config::Fields::Types
  class << self
    def load(type); end
    def register(type, klass = T.unsafe(nil)); end
  end
end

class RailsAdmin::Config::Fields::Types::ActionText < ::RailsAdmin::Config::Fields::Types::Text
  def css_location(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::ActiveRecordEnum < ::RailsAdmin::Config::Fields::Types::Enum
  def enum(*args, &block); end
  def form_value; end
  def multiple(*args, &block); end
  def multiple?; end
  def parse_input(params); end
  def parse_value(value); end
  def pretty_value(*args, &block); end
  def queryable(*args, &block); end
  def type; end

  private

  def parse_input_value(value); end
  def type_cast_value(value); end
end

class RailsAdmin::Config::Fields::Types::ActiveStorage < ::RailsAdmin::Config::Fields::Types::FileUpload
  def delete_method(*args, &block); end
  def eager_load(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def resource_url(thumb = T.unsafe(nil)); end
  def thumb_method(*args, &block); end
  def value; end
end

class RailsAdmin::Config::Fields::Types::BelongsToAssociation < ::RailsAdmin::Config::Fields::Association
  def associated_primary_key; end
  def eager_load(*args, &block); end
  def formatted_value(*args, &block); end
  def method_name; end
  def multiple?; end
  def partial(*args, &block); end
  def searchable(*args, &block); end
  def selected_id; end
  def sortable(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Boolean < ::RailsAdmin::Config::Fields::Base
  def css_classes(*args, &block); end
  def export_value(*args, &block); end
  def form_value; end

  # Accessor for field's help text displayed below input field.
  def generic_help; end

  def labels(*args, &block); end
  def nullable(*args, &block); end
  def nullable?; end
  def parse_input(params); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
  def view_helper(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::BsonObjectId < ::RailsAdmin::Config::Fields::Types::String
  def generic_help; end
  def label(*args, &block); end
  def parse_input(params); end
  def parse_value(value); end
  def read_only(*args, &block); end
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
end

class RailsAdmin::Config::Fields::Types::CKEditor < ::RailsAdmin::Config::Fields::Types::Text
  def base_location(*args, &block); end
  def config_js(*args, &block); end
  def location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Carrierwave < ::RailsAdmin::Config::Fields::Types::FileUpload
  def cache_method(*args, &block); end
  def delete_method(*args, &block); end
  def resource_url(thumb = T.unsafe(nil)); end
  def thumb_method(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Citext < ::RailsAdmin::Config::Fields::Types::Text; end

class RailsAdmin::Config::Fields::Types::CodeMirror < ::RailsAdmin::Config::Fields::Types::Text
  def assets(*args, &block); end
  def config(*args, &block); end
  def css_location(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Color < ::RailsAdmin::Config::Fields::Types::StringLike
  def color(*args, &block); end
  def export_value(*args, &block); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
  def view_helper(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Date < ::RailsAdmin::Config::Fields::Types::Datetime
  def date_format(*args, &block); end
  def html_attributes(*args, &block); end
  def i18n_scope(*args, &block); end
  def parse_value(value); end
end

class RailsAdmin::Config::Fields::Types::Datetime < ::RailsAdmin::Config::Fields::Base
  def date_format(*args, &block); end
  def datepicker_options(*args, &block); end
  def form_value; end
  def formatted_value(*args, &block); end
  def html_attributes(*args, &block); end
  def i18n_scope(*args, &block); end
  def momentjs_format(*args, &block); end
  def parse_input(params); end
  def parse_value(value); end
  def partial(*args, &block); end
  def queryable(*args, &block); end
  def queryable?; end
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
  def strftime_format(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Decimal < ::RailsAdmin::Config::Fields::Types::Numeric
  def html_attributes(*args, &block); end
end

# Field type that supports Paperclip file uploads
class RailsAdmin::Config::Fields::Types::Dragonfly < ::RailsAdmin::Config::Fields::Types::FileUpload
  def cache_method(*args, &block); end
  def delete_method(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def resource_url(thumb = T.unsafe(nil)); end
  def thumb_method(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Enum < ::RailsAdmin::Config::Fields::Base
  def enum(*args, &block); end
  def enum_method(*args, &block); end
  def multiple(*args, &block); end
  def multiple?; end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::FileUpload < ::RailsAdmin::Config::Fields::Base
  def allowed_methods(*args, &block); end
  def cache_method(*args, &block); end
  def cache_value(*args, &block); end
  def delete_method(*args, &block); end
  def export_value(*args, &block); end
  def html_attributes(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def link_name(*args, &block); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end

  # virtual class
  def resource_url; end

  def thumb_method(*args, &block); end
  def virtual?; end
end

class RailsAdmin::Config::Fields::Types::Float < ::RailsAdmin::Config::Fields::Types::Numeric
  def html_attributes(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Froala < ::RailsAdmin::Config::Fields::Types::Text
  def config_options(*args, &block); end
  def css_location(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::HasAndBelongsToManyAssociation < ::RailsAdmin::Config::Fields::Types::HasManyAssociation; end

class RailsAdmin::Config::Fields::Types::HasManyAssociation < ::RailsAdmin::Config::Fields::Association
  # Reader for validation errors of the bound object
  def errors; end

  def method_name; end
  def orderable(*args, &block); end
  def partial(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::HasOneAssociation < ::RailsAdmin::Config::Fields::Association
  def formatted_value(*args, &block); end
  def method_name; end
  def multiple?; end
  def partial(*args, &block); end
  def selected_id; end
end

class RailsAdmin::Config::Fields::Types::Hidden < ::RailsAdmin::Config::Fields::Types::StringLike
  def generic_help; end
  def help(*args, &block); end
  def label(*args, &block); end
  def view_helper(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Inet < ::RailsAdmin::Config::Fields::Base; end

class RailsAdmin::Config::Fields::Types::Integer < ::RailsAdmin::Config::Fields::Types::Numeric
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
end

class RailsAdmin::Config::Fields::Types::Json < ::RailsAdmin::Config::Fields::Types::Text
  def export_value(*args, &block); end
  def formatted_value(*args, &block); end
  def parse_input(params); end
  def parse_value(value); end
  def pretty_value(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::MultipleActiveStorage < ::RailsAdmin::Config::Fields::Types::MultipleFileUpload
  def attachment_class(*args, &block); end
  def delete_method(*args, &block); end
  def eager_load(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::MultipleActiveStorage::ActiveStorageAttachment < ::RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  def delete_value(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def resource_url(thumb = T.unsafe(nil)); end
  def thumb_method(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::MultipleCarrierwave < ::RailsAdmin::Config::Fields::Types::MultipleFileUpload
  def attachment_class(*args, &block); end
  def cache_method(*args, &block); end
  def delete_method(*args, &block); end
  def keep_method(*args, &block); end
  def reorderable(*args, &block); end
  def reorderable?; end
  def value; end
end

class RailsAdmin::Config::Fields::Types::MultipleCarrierwave::CarrierwaveAttachment < ::RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  def delete_value(*args, &block); end
  def keep_value(*args, &block); end
  def resource_url(thumb = T.unsafe(nil)); end
  def thumb_method(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::MultipleFileUpload < ::RailsAdmin::Config::Fields::Base
  def initialize(*args); end

  def allowed_methods(*args, &block); end
  def attachment(&block); end
  def attachment_class(*args, &block); end
  def attachments; end
  def cache_method(*args, &block); end
  def delete_method(*args, &block); end
  def export_value(*args, &block); end
  def html_attributes(*args, &block); end
  def keep_method(*args, &block); end
  def partial(*args, &block); end
  def pretty_value(*args, &block); end
  def reorderable(*args, &block); end
  def reorderable?; end

  # virtual class
  def virtual?; end
end

class RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  def initialize(value); end

  def delete_key(*args, &block); end
  def delete_value(*args, &block); end
  def image(*args, &block); end
  def image?; end
  def keep_value(*args, &block); end
  def pretty_value(*args, &block); end
  def resource_url(_thumb = T.unsafe(nil)); end
  def thumb_method(*args, &block); end

  # Returns the value of attribute value.
  def value; end
end

class RailsAdmin::Config::Fields::Types::Numeric < ::RailsAdmin::Config::Fields::Base
  def view_helper(*args, &block); end
end

# Field type that supports Paperclip file uploads
class RailsAdmin::Config::Fields::Types::Paperclip < ::RailsAdmin::Config::Fields::Types::FileUpload
  def delete_method(*args, &block); end
  def resource_url(thumb = T.unsafe(nil)); end
  def thumb_method(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Password < ::RailsAdmin::Config::Fields::Types::String
  def formatted_value(*args, &block); end
  def parse_input(params); end
  def pretty_value(*args, &block); end

  # Password field's value does not need to be read
  def value; end

  def view_helper(*args, &block); end
  def visible(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::PolymorphicAssociation < ::RailsAdmin::Config::Fields::Types::BelongsToAssociation
  def allowed_methods(*args, &block); end
  def associated_collection(type); end
  def associated_collection_cache_all(*args, &block); end
  def associated_collection_scope(*args, &block); end
  def associated_model_config; end
  def eager_load(*args, &block); end
  def formatted_value(*args, &block); end
  def parse_input(params); end
  def partial(*args, &block); end
  def polymorphic_type_collection; end
  def polymorphic_type_urls; end
  def searchable(*args, &block); end
  def sortable(*args, &block); end

  # Reader for field's value
  def value; end

  def visible(*args, &block); end
  def visible?; end
end

class RailsAdmin::Config::Fields::Types::Serialized < ::RailsAdmin::Config::Fields::Types::Text
  def formatted_value(*args, &block); end
  def parse_input(params); end
  def parse_value(value); end
end

class RailsAdmin::Config::Fields::Types::Shrine < ::RailsAdmin::Config::Fields::Types::FileUpload
  def cache_method(*args, &block); end
  def cache_value(*args, &block); end
  def delete_method(*args, &block); end
  def link_name(*args, &block); end
  def resource_url(thumb = T.unsafe(nil)); end
  def thumb_method(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::SimpleMDE < ::RailsAdmin::Config::Fields::Types::Text
  def css_location(*args, &block); end
  def instance_config(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::String < ::RailsAdmin::Config::Fields::Types::StringLike
  def generic_help; end
  def html_attributes(*args, &block); end
  def input_size; end
  def partial(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::StringLike < ::RailsAdmin::Config::Fields::Base
  def parse_input(params); end
  def treat_empty_as_nil(*args, &block); end
  def treat_empty_as_nil?; end
end

class RailsAdmin::Config::Fields::Types::Text < ::RailsAdmin::Config::Fields::Types::StringLike
  def html_attributes(*args, &block); end
  def partial(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Time < ::RailsAdmin::Config::Fields::Types::Datetime
  def parse_value(value); end
  def strftime_format(*args, &block); end
end

class RailsAdmin::Config::Fields::Types::Timestamp < ::RailsAdmin::Config::Fields::Types::Datetime; end
class RailsAdmin::Config::Fields::Types::Uuid < ::RailsAdmin::Config::Fields::Types::String; end

class RailsAdmin::Config::Fields::Types::Wysihtml5 < ::RailsAdmin::Config::Fields::Types::Text
  def config_options(*args, &block); end
  def css_location(*args, &block); end
  def js_location(*args, &block); end
  def partial(*args, &block); end
  def version(*args, &block); end
end

module RailsAdmin::Config::Groupable
  # Register a group instance variable and accessor methods for objects
  # extending the has groups mixin. The extended objects must implement
  # reader for a parent object which includes this module.
  def group(name = T.unsafe(nil)); end
end

# Provides accessor and autoregistering of model's description.
module RailsAdmin::Config::HasDescription
  def desc(description, &_block); end

  # Returns the value of attribute description.
  def description; end
end

# Provides accessors and autoregistering of model's fields.
module RailsAdmin::Config::HasFields
  # Accessor for all fields
  def all_fields; end

  # configure field(s) from the default group in a section without changing the original order.
  def configure(name, type = T.unsafe(nil), &block); end

  # exclude fields by name or by condition (block)
  def exclude_fields(*field_names, &block); end

  # exclude fields by name or by condition (block)
  # API candy
  def exclude_fields_if(*field_names, &block); end

  # Defines a configuration for a field.
  def field(name, type = T.unsafe(nil), add_to_section = T.unsafe(nil), &block); end

  # Returns all field configurations for the model configuration instance. If no fields
  # have been defined returns all fields. Defined fields are sorted to match their
  # order property. If order was not specified it will match the order in which fields
  # were defined.
  #
  # If a block is passed it will be evaluated in the context of each field
  def fields(*field_names, &block); end

  # Defines configuration for fields by their type.
  def fields_of_type(type, &block); end

  def include_all_fields; end

  # include fields by name and apply an optionnal block to each (through a call to fields),
  # or include fields by conditions if no field names
  def include_fields(*field_names, &block); end

  # include fields by name and apply an optionnal block to each (through a call to fields),
  # or include fields by conditions if no field names
  def include_fields_if(*field_names, &block); end

  # Get all fields defined as visible, in the correct order.
  def visible_fields; end

  protected

  # Raw fields.
  # Recursively returns parent section's raw fields
  # Duping it if accessed for modification.
  def _fields(readonly = T.unsafe(nil)); end
end

module RailsAdmin::Config::HasGroups
  # Accessor for a group
  #
  # If group with given name does not yet exist it will be created. If a
  # block is passed it will be evaluated in the context of the group
  def group(name, &block); end

  # Reader for groups that are marked as visible
  def visible_groups; end
end

# Defines a visibility configuration
module RailsAdmin::Config::Hideable
  # Reader whether object is hidden.
  def hidden?; end

  # Writer to hide object.
  def hide(&block); end

  # Writer to show field.
  def show(&block); end

  class << self
    # Visibility defaults to true.
    def included(klass); end
  end
end

module RailsAdmin::Config::Inspectable
  def inspect; end

  private

  def instance_variable_name(variable); end
  def set_named_instance_variables; end
end

# Model specific configuration object.
class RailsAdmin::Config::Model
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Hideable
  include ::RailsAdmin::Config::Sections
  include ::RailsAdmin::Config::Inspectable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  def initialize(entity); end

  # Returns the value of attribute abstract_model.
  def abstract_model; end

  def base(&block); end
  def create(&block); end
  def edit(&block); end
  def excluded?; end
  def export(&block); end

  # Returns the value of attribute groups.
  def groups; end

  # Sets the attribute groups
  def groups=(_arg0); end

  def label(*args, &block); end
  def label_plural(*args, &block); end
  def list(&block); end

  # Act as a proxy for the base section configuration that actually
  # store the configurations.
  def method_missing(method_name, *args, &block); end

  def modal(&block); end
  def navigation_icon(*args, &block); end
  def navigation_label(*args, &block); end
  def nested(&block); end
  def object_label; end
  def object_label_method(*args, &block); end

  # Returns the value of attribute parent.
  def parent(*args, &block); end

  def pluralize(count); end

  # Returns the value of attribute root.
  def root; end

  def show(&block); end
  def update(&block); end
  def visible(*args, &block); end
  def visible?; end
  def weight(*args, &block); end
end

RailsAdmin::Config::Model::NAMED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

module RailsAdmin::Config::Proxyable
  def bindings; end
  def bindings=(new_bindings); end
  def with(bindings = T.unsafe(nil)); end
end

class RailsAdmin::Config::Proxyable::Proxy < ::BasicObject
  def initialize(object, bindings = T.unsafe(nil)); end

  # Bind variables to be used by the configuration options
  def bind(key, value = T.unsafe(nil)); end

  def method_missing(method_name, *args, &block); end
end

# Sections describe different views in the RailsAdmin engine. Configurable sections are
# list and navigation.
#
# Each section's class object can store generic configuration about that section (such as the
# number of visible tabs in the main navigation), while the instances (accessed via model
# configuration objects) store model specific configuration (such as the visibility of the
# model).
module RailsAdmin::Config::Sections
  class << self
    def included(klass); end
  end
end

# Configuration of the show view for a new object
class RailsAdmin::Config::Sections::Base
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Inspectable
  include ::RailsAdmin::Config::HasFields
  include ::RailsAdmin::Config::HasGroups
  include ::RailsAdmin::Config::HasDescription
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  def initialize(parent); end

  # Returns the value of attribute abstract_model.
  def abstract_model; end

  # Returns the value of attribute parent.
  def parent; end

  # Returns the value of attribute root.
  def root; end
end

RailsAdmin::Config::Sections::Base::NAMED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# Configuration of the edit view for a new object
class RailsAdmin::Config::Sections::Create < ::RailsAdmin::Config::Sections::Edit; end

# Configuration of the edit view for an existing object
class RailsAdmin::Config::Sections::Edit < ::RailsAdmin::Config::Sections::Base; end

# Configuration of the navigation view
class RailsAdmin::Config::Sections::Export < ::RailsAdmin::Config::Sections::Base; end

# Configuration of the list view
class RailsAdmin::Config::Sections::List < ::RailsAdmin::Config::Sections::Base
  def checkboxes(*args, &block); end
  def checkboxes?; end
  def fields_for_table; end
  def filters(*args, &block); end
  def items_per_page(*args, &block); end
  def limited_pagination(*args, &block); end
  def row_css_class(*args, &block); end
  def scopes(*args, &block); end
  def search_by(*args, &block); end
  def sidescroll(*args, &block); end
  def sort_by(*args, &block); end
  def sort_reverse(*args, &block); end
  def sort_reverse?; end
end

class RailsAdmin::Config::Sections::Modal < ::RailsAdmin::Config::Sections::Edit; end
class RailsAdmin::Config::Sections::Nested < ::RailsAdmin::Config::Sections::Edit; end
class RailsAdmin::Config::Sections::Show < ::RailsAdmin::Config::Sections::Base; end
class RailsAdmin::Config::Sections::Update < ::RailsAdmin::Config::Sections::Edit; end
RailsAdmin::EXTENSIONS = T.let(T.unsafe(nil), Array)
class RailsAdmin::Engine < ::Rails::Engine; end
module RailsAdmin::Extensions; end
module RailsAdmin::Extensions::CanCanCan; end

# This adapter is for the CanCanCan[https://github.com/CanCanCommunity/cancancan] authorization library.
class RailsAdmin::Extensions::CanCanCan::AuthorizationAdapter
  # See the +authorize_with+ config method for where the initialization happens.
  def initialize(controller, ability = T.unsafe(nil)); end

  # This is called in the new/create actions to determine the initial attributes for new
  # records. It should return a hash of attributes which match what the user
  # is authorized to create.
  def attributes_for(action, abstract_model); end

  # This method is called in every controller action and should raise an exception
  # when the authorization fails. The first argument is the name of the controller
  # action as a symbol (:create, :bulk_delete, etc.). The second argument is the
  # AbstractModel instance that applies. The third argument is the actual model
  # instance if it is available.
  def authorize(action, abstract_model = T.unsafe(nil), model_object = T.unsafe(nil)); end

  # This method is called primarily from the view to determine whether the given user
  # has access to perform the action on a given model. It should return true when authorized.
  # This takes the same arguments as +authorize+. The difference is that this will
  # return a boolean whereas +authorize+ will raise an exception when not authorized.
  def authorized?(action, abstract_model = T.unsafe(nil), model_object = T.unsafe(nil)); end

  # This is called when needing to scope a database query. It is called within the list
  # and bulk_delete/destroy actions and should return a scope which limits the records
  # to those which the user can perform the given action on.
  def query(action, abstract_model); end

  private

  def resolve_action_and_subject(action, abstract_model, model_object); end
end

module RailsAdmin::Extensions::CanCanCan::AuthorizationAdapter::ControllerExtension
  def current_ability; end
end

module RailsAdmin::Extensions::ControllerExtension; end
module RailsAdmin::Extensions::PaperTrail; end

class RailsAdmin::Extensions::PaperTrail::AuditingAdapter
  def initialize(controller, user_class = T.unsafe(nil), version_class = T.unsafe(nil)); end

  def create_object(_object, _abstract_model, _user); end
  def delete_object(_object, _model, _user); end
  def latest(count = T.unsafe(nil)); end
  def listing_for_model(model, query, sort, sort_reverse, all, page, per_page = T.unsafe(nil)); end
  def listing_for_object(model, object, query, sort, sort_reverse, all, page, per_page = T.unsafe(nil)); end
  def update_object(_object, _model, _user, _changes); end

  protected

  # - model - a RailsAdmin::AbstractModel
  def listing_for_model_or_object(model, object, query, sort, sort_reverse, all, page, per_page); end

  # PT can be configured to use [custom version
  # classes](https://github.com/paper-trail-gem/paper_trail#6a-custom-version-classes)
  #
  # ```ruby
  # has_paper_trail versions: { class_name: 'MyVersion' }
  # ```
  def version_class_for(model); end

  def versions_for_model(model); end

  class << self
    def setup; end
  end
end

RailsAdmin::Extensions::PaperTrail::AuditingAdapter::COLUMN_MAPPING = T.let(T.unsafe(nil), Hash)
RailsAdmin::Extensions::PaperTrail::AuditingAdapter::E_VERSION_MODEL_NOT_SET = T.let(T.unsafe(nil), String)

module RailsAdmin::Extensions::PaperTrail::ControllerExtension
  def user_for_paper_trail; end
end

class RailsAdmin::Extensions::PaperTrail::VersionProxy
  def initialize(version, user_class = T.unsafe(nil)); end

  def created_at; end
  def item; end
  def message; end
  def table; end
  def username; end
end

module RailsAdmin::Extensions::Pundit; end

# This adapter is for the Pundit[https://github.com/elabs/pundit] authorization library.
# You can create another adapter for different authorization behavior, just be certain it
# responds to each of the public methods here.
class RailsAdmin::Extensions::Pundit::AuthorizationAdapter
  # See the +authorize_with+ config method for where the initialization happens.
  def initialize(controller); end

  # This is called in the new/create actions to determine the initial attributes for new
  # records. It should return a hash of attributes which match what the user
  # is authorized to create.
  def attributes_for(action, abstract_model); end

  # This method is called in every controller action and should raise an exception
  # when the authorization fails. The first argument is the name of the controller
  # action as a symbol (:create, :bulk_delete, etc.). The second argument is the
  # AbstractModel instance that applies. The third argument is the actual model
  # instance if it is available.
  def authorize(action, abstract_model = T.unsafe(nil), model_object = T.unsafe(nil)); end

  # This method is called primarily from the view to determine whether the given user
  # has access to perform the action on a given model. It should return true when authorized.
  # This takes the same arguments as +authorize+. The difference is that this will
  # return a boolean whereas +authorize+ will raise an exception when not authorized.
  def authorized?(action, abstract_model = T.unsafe(nil), model_object = T.unsafe(nil)); end

  # This is called when needing to scope a database query. It is called within the list
  # and bulk_delete/destroy actions and should return a scope which limits the records
  # to those which the user can perform the given action on.
  def query(_action, abstract_model); end

  private

  def action_for_pundit(action); end
  def policy(record); end

  class << self
    # This method is called first time only and used for setup
    def setup; end
  end
end

class RailsAdmin::FormBuilder < ::ActionView::Helpers::FormBuilder
  include ::NestedForm::BuilderMixin
  include ::RailsAdmin::ApplicationHelper

  def dom_id(field); end
  def dom_name(field); end
  def errors_for(field); end
  def field_for(field); end
  def field_wrapper_for(field, nested_in); end
  def fieldset_for(fieldset, nested_in); end
  def generate(options = T.unsafe(nil)); end
  def help_for(field); end
  def input_for(field); end
  def jquery_namespace(field); end
  def object_infos; end

  protected

  def generator_action(action, nested); end
  def visible_groups(model_config, action); end
  def without_field_error_proc_added_div; end

  private

  def nested_field_association?(field, nested_in); end
end

class RailsAdmin::HashHelper
  class << self
    def symbolize(obj); end
  end
end

class RailsAdmin::MainController < ::RailsAdmin::ApplicationController
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::TextHelper
  include ::RailsAdmin::MainHelper
  include ::RailsAdmin::ApplicationHelper
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def bulk_action; end
  def list_entries(model_config = T.unsafe(nil), auth_scope_key = T.unsafe(nil), additional_scope = T.unsafe(nil), pagination = T.unsafe(nil)); end

  private

  def _layout(lookup_context, formats); end
  def action_missing(name, *_args); end
  def back_or_index; end
  def check_for_cancel; end
  def get_association_scope_from_params; end
  def get_collection(model_config, scope, pagination); end
  def get_layout; end
  def get_sort_hash(model_config); end
  def handle_save_error(whereto = T.unsafe(nil)); end
  def method_missing(name, *args, &block); end
  def redirect_to_on_success; end
  def respond_to_missing?(sym, include_private); end
  def sanitize_params_for!(action, model_config = T.unsafe(nil), target_params = T.unsafe(nil)); end
  def visible_fields(action, model_config = T.unsafe(nil)); end

  class << self
    def __callbacks; end
    def _layout; end
    def _layout_conditions; end
    def middleware_stack; end
  end
end

module RailsAdmin::MainHelper
  def filterable_fields; end
  def get_indicator(percent); end
  def ordered_filter_options; end
  def ordered_filters; end
  def rails_admin_form_for(*args, &block); end
end

class RailsAdmin::ModelNotFound < ::StandardError; end
class RailsAdmin::ObjectNotFound < ::StandardError; end
module RailsAdmin::Support; end

class RailsAdmin::Support::Datetime
  class << self
    def to_momentjs(strftime_format); end
  end
end

# Ruby format options as a key and momentjs format options as a value
RailsAdmin::Support::Datetime::MOMENTJS_TRANSLATIONS = T.let(T.unsafe(nil), Hash)
