# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `trestle` gem.
# Please instead update this file by running `bin/tapioca gem trestle`.

module ActionController::Base::HelperMethods
  def alert(*args, &block); end
  def combined_fragment_cache_key(*args, &block); end
  def content_security_policy?(*args, &block); end
  def content_security_policy_nonce(*args, &block); end
  def cookies(*args, &block); end
  def form_authenticity_token(*args, &block); end
  def notice(*args, &block); end
  def protect_against_forgery?(*args, &block); end
  def view_cache_dependencies(*args, &block); end
end

module Trestle
  def registry; end
  def registry=(val); end

  class << self
    # Builds and registers a new plain admin
    def admin(name, **options, &block); end

    def admins(*_arg0, &_arg1); end

    # Configuration methods
    def config; end

    def configure(&block); end

    # Returns the I18n fallbacks for the given locale.
    #
    # This is used from within a Sprockets asset (JavaScript)
    # to determine which locale files to include.
    #
    # Examples
    #
    # Trestle.i18n_fallbacks("pt-BR") => ["pt-BR", "pt"]
    # Trestle.i18n_fallbacks("ca") => ["ca", "es-ES", "es"] %>
    #
    # Returns an array of locale Strings.
    def i18n_fallbacks(locale = T.unsafe(nil)); end

    def lookup(*_arg0, &_arg1); end
    def lookup_model(*_arg0, &_arg1); end

    # Builds the global navigation by combining the menu options from the
    # Trestle configuration along with menu blocks from admin resources.
    def navigation(context); end

    def railtie_helpers_paths; end
    def railtie_namespace; end
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end
    def register(*_arg0, &_arg1); end
    def registry; end
    def registry=(val); end

    # Builds and registers a new admin resource
    def resource(name, register_model: T.unsafe(nil), **options, &block); end

    def table_name_prefix; end
    def use_relative_model_naming?; end
  end
end

module Trestle::Adapters
  extend ::ActiveSupport::Autoload

  class << self
    # Creates a new Adapter class with the given modules mixed in
    def compose(*modules); end
  end
end

module Trestle::Adapters::ActiveRecordAdapter
  def build_instance(attrs = T.unsafe(nil), params = T.unsafe(nil)); end
  def collection(params = T.unsafe(nil)); end
  def count(collection); end
  def default_form_attributes; end
  def default_table_attributes; end
  def delete_instance(instance, params = T.unsafe(nil)); end
  def find_instance(params); end
  def human_attribute_name(attribute, options = T.unsafe(nil)); end
  def merge_scopes(scope, other); end
  def save_instance(instance, params = T.unsafe(nil)); end
  def sort(collection, field, order); end
  def update_instance(instance, attrs, params = T.unsafe(nil)); end

  protected

  def array_column?(column); end
  def counter_cache_column?(attribute); end
  def default_attributes; end
  def enum_column?(column); end
  def enum_human_name(column, value); end
  def enum_values(column); end
  def inheritance_column?(attribute); end
  def primary_key?(attribute); end
end

class Trestle::Adapters::Adapter
  include ::Trestle::EvaluationContext

  def initialize(admin, context = T.unsafe(nil)); end

  # Returns the value of attribute admin.
  def admin; end

  # Builds (and returns) a new instance for new/create actions.
  #
  # attrs  - Permitted attributes to set on the new instance
  # params - Unfiltered params hash from the controller
  def build_instance(attrs = T.unsafe(nil), params = T.unsafe(nil)); end

  # Loads the initial collection for use by the index action.
  #
  # params - Unfiltered params hash from the controller
  #
  # Returns a scope object that can be chained with other methods (e.g. sort, paginate, count, etc).
  def collection(params = T.unsafe(nil)); end

  # Counts the number of objects in a collection for use by scope links.
  #
  # collection - The collection to count
  #
  # Returns the total number (integer) of objects in the collection.
  def count(collection); end

  # Decorates a collection for rendering by the index view.
  # Decorating is the final step in preparing the collection for the view.
  #
  # collection - The collection to decorate
  #
  # Returns an enumerable collection of instances.
  def decorate_collection(collection); end

  # Generates a list of attributes that should be rendered by the new/show/edit (form) views.
  #
  # Returns an Array of Trestle::Attribute and/or Trestle::Attribute::Association objects.
  def default_form_attributes; end

  # Generates a list of attributes that should be rendered by the index (table) view.
  #
  # Returns an Array of Trestle::Attribute and/or Trestle::Attribute::Association objects.
  def default_table_attributes; end

  # Deletes an instance (used by the destroy action).
  #
  # instance - The instance to delete
  # params   - Unfiltered params hash from the controller
  #
  # Returns a boolean indicating the success/fail status of the deletion.
  def delete_instance(instance, params = T.unsafe(nil)); end

  # Finalizes a collection so that it can be rendered within the index view.
  #
  # In most cases (e.g. ActiveRecord), no finalization is required. However if you are using a search library then
  # you may need to explicitly execute the search, or access the models via a #records or #objects method.
  #
  # collection - The collection to finalize
  #
  # Returns an enumerable collection of instances.
  def finalize_collection(collection); end

  # Finds (and returns) an individual instance for use by the show, edit, update, destroy actions.
  #
  # params - Unfiltered params hash from the controller
  def find_instance(params); end

  # Produces a human-readable name for a given attribute, applying I18n where appropriate.
  # See ActiveModel::Translation for an implementation of this method.
  #
  # attribute - Attribute name (Symbol)
  # options   - Hash of options [not currently used]
  #
  # Returns the human-readable name of the given attribute as a String.
  def human_attribute_name(attribute, options = T.unsafe(nil)); end

  # Merges scopes together for Trestle scope application and counting.
  #
  # scope - The first scope
  # other - The second scope
  #
  # Returns a scope object representing the combination of the two given scopes.
  def merge_scopes(scope, other); end

  def model(*_arg0, &_arg1); end

  # Paginates a collection for use by the index action.
  #
  # collection - The collection to paginate
  # params     - Unfiltered params hash from the controller:
  # :page - current page number
  #
  # Returns a Kaminari-compatible scope corresponding to a single page.
  def paginate(collection, params); end

  # Filters the submitted form parameters and returns a whitelisted attributes 'hash'
  # that can be set or updated on a model instance.
  #
  # IMPORTANT: By default, all params are permitted, which assumes a trusted administrator. If this is not the
  # case, a `params` block should be individually declared for each admin with the set of permitted parameters.
  #
  # params - Unfiltered params hash from the controller
  #
  # Returns the permitted set of parameters as a ActionController::Parameters object.
  def permitted_params(params); end

  # Saves an instance (used by the create and update actions).
  #
  # instance - The instance to save
  # params   - Unfiltered params hash from the controller
  #
  # Returns a boolean indicating the success/fail status of the save.
  def save_instance(instance, params = T.unsafe(nil)); end

  # Sorts the collection by the given field and order.
  # This method is called when an explicit sort column for the given field is not defined.
  #
  # collection - The collection to sort
  # field      - The field to sort by
  # order      - Symbol (:asc or :desc) representing the sort order (ascending or descending)
  #
  # Returns a scope object
  def sort(collection, field, order); end

  # Converts an instance to a URL parameter. The result of this method is passed to the #find_instance
  # adapter method as params[:id]. It is recommended to simply use the instance's #id, as other potential options
  # such as a permalink/slug could potentially be changed during editing.
  #
  # instance - The instance to convert
  #
  # Returns the URL representation of the instance.
  def to_param(instance); end

  # Updates (but does not save) a given resource's attributes.
  #
  # instance - The instance to update
  # attrs    - Permitted attributes to update on the instance
  # params   - Unfiltered params hash from the controller
  #
  # The return value is ignored.
  def update_instance(instance, attrs, params = T.unsafe(nil)); end
end

module Trestle::Adapters::DraperAdapter
  def decorate_collection(collection); end
end

class Trestle::Admin
  def initialize(context = T.unsafe(nil)); end

  # Delegate all missing methods to corresponding class method if available
  def method_missing(name, *args, &block); end

  def to_param(*_arg0, &_arg1); end

  private

  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    def actions; end
    def additional_routes; end
    def admin_name; end
    def breadcrumb; end

    # Sets the attribute breadcrumb
    def breadcrumb=(_arg0); end

    def breadcrumbs; end
    def build(&block); end
    def controller_namespace; end
    def default_breadcrumb; end
    def default_human_admin_name; end
    def default_view_path; end

    # Returns the value of attribute form.
    def form; end

    # Sets the attribute form
    def form=(_arg0); end

    def hooks; end
    def human_admin_name; end
    def i18n_key; end

    # Returns the value of attribute menu.
    def menu; end

    # Sets the attribute menu
    def menu=(_arg0); end

    def options; end

    # Sets the attribute options
    def options=(_arg0); end

    def parameter_name; end
    def path(action = T.unsafe(nil), options = T.unsafe(nil)); end
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end
    def root_action; end
    def route_name; end
    def routes; end
    def t(key, options = T.unsafe(nil)); end

    # Deprecated: Use `tables[:index]` instead
    def table; end

    # Deprecated: Use `tables[:index]=` instead
    def table=(table); end

    def tables; end
    def to_param(*_arg0); end
    def translate(key, options = T.unsafe(nil)); end
    def validate!; end
    def view_path; end

    # Sets the attribute view_path
    def view_path=(_arg0); end

    def view_path_prefixes; end

    private

    def unscope_path(path); end
  end
end

class Trestle::Admin::Builder < ::Trestle::Builder
  def initialize(admin); end

  def admin(&block); end
  def admin_class; end
  def admin_class=(_arg0); end
  def admin_class?; end
  def after_action(*_arg0, &_arg1); end
  def around_action(*_arg0, &_arg1); end
  def before_action(*_arg0, &_arg1); end
  def breadcrumb(label = T.unsafe(nil), path = T.unsafe(nil), &block); end
  def controller(&block); end
  def controller=(_arg0); end
  def controller?; end
  def form(options = T.unsafe(nil), &block); end
  def helper(*_arg0, &_arg1); end
  def hook(name, options = T.unsafe(nil), &block); end
  def menu(*args, &block); end
  def routes(&block); end
  def table(name_or_options = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def target; end

  protected

  def normalize_table_options(name, options); end

  class << self
    def admin_class; end
    def admin_class=(value); end
    def admin_class?; end
    def controller; end
    def controller=(value); end
    def controller?; end
    def create(name, options = T.unsafe(nil), &block); end
  end
end

class Trestle::AdminController < ::Trestle::ApplicationController
  def admin; end
  def index; end

  protected

  def breadcrumbs; end
  def flash_message(type, title:, message:); end

  private

  def _layout(lookup_context, formats); end

  class << self
    def _helper_methods; end
    def admin; end
    def middleware_stack; end

    private

    def local_prefixes; end
  end
end

module Trestle::AdminController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Trestle::ApplicationController::HelperMethods

  # def admin(*args, &block); end
end

class Trestle::ApplicationController < ::ActionController::Base
  include ::Trestle::Controller::Breadcrumbs
  include ::Trestle::Controller::Callbacks
  include ::Trestle::Controller::Dialog
  include ::Trestle::Controller::Helpers
  include ::Trestle::Controller::Layout
  include ::Trestle::Controller::Location
  include ::Trestle::Controller::Title
  include ::Trestle::Controller::Toolbars

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def _helper_methods; end
    def _layout; end
    def _layout_conditions; end
    def helpers_path; end
    def middleware_stack; end
  end
end

module Trestle::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods

  # def breadcrumb(*args, &block); end
  # def breadcrumbs(*args, &block); end
  # def default_title(*args, &block); end
  # def dialog_request?(*args, &block); end
  # def toolbar(*args, &block); end
  # def toolbars(*args, &block); end
end

class Trestle::Attribute
  def initialize(name, type, options = T.unsafe(nil)); end

  def array?; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute options.
  def options; end

  # Returns the value of attribute type.
  def type; end
end

class Trestle::Attribute::Association < ::Trestle::Attribute
  def initialize(name, options = T.unsafe(nil)); end

  def association_class; end
  def association_name; end
  def polymorphic?; end
end

module Trestle::AvatarHelper
  def avatar(options = T.unsafe(nil)); end
  def default_avatar_options; end
  def gravatar(email, options = T.unsafe(nil)); end
end

class Trestle::Breadcrumb
  def initialize(label, path = T.unsafe(nil)); end

  def ==(other); end

  # Returns the value of attribute label.
  def label; end

  # Returns the value of attribute path.
  def path; end

  class << self
    def cast(obj); end
  end
end

class Trestle::Breadcrumb::Trail
  include ::Enumerable

  def initialize(breadcrumbs = T.unsafe(nil)); end

  def ==(other); end
  def append(label, path = T.unsafe(nil)); end
  def dup; end
  def each(*_arg0, &_arg1); end
  def first(*_arg0, &_arg1); end
  def last(*_arg0, &_arg1); end
  def prepend(label, path = T.unsafe(nil)); end
end

class Trestle::Builder
  def build(&block); end

  class << self
    def build(*args, &block); end
    def target(name); end
  end
end

module Trestle::CardHelper
  def card(options = T.unsafe(nil), &block); end
  def panel(options = T.unsafe(nil), &block); end
  def well(options = T.unsafe(nil), &block); end
end

module Trestle::Configurable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Trestle::Configurable::ClassMethods

  def as_json(options = T.unsafe(nil)); end
  def assign(name, value); end
  def configure(&block); end
  def defaults(*_arg0, &_arg1); end
  def fetch(name); end
  def inspect; end
  def options; end
end

module Trestle::Configurable::ClassMethods
  def defaults; end
  def deprecated_option(name, message = T.unsafe(nil)); end
  def option(name, default = T.unsafe(nil), opts = T.unsafe(nil)); end
end

module Trestle::Configurable::Open
  protected

  def method_missing(name, *args, &block); end
  def respond_to_missing(name, include_all = T.unsafe(nil)); end
end

class Trestle::Configuration
  include ::Trestle::Configurable
  extend ::Trestle::Configurable::ClassMethods

  # Register a global after action
  def after_action(options = T.unsafe(nil), &block); end

  def after_actions(*args); end
  def after_actions=(value); end

  # Register a global around action
  def around_action(options = T.unsafe(nil), &block); end

  def around_actions(*args); end
  def around_actions=(value); end
  def automount(*args); end
  def automount=(value); end

  # Register a global before action
  def before_action(options = T.unsafe(nil), &block); end

  def before_actions(*args); end
  def before_actions=(value); end
  def debug_form_errors(*args); end
  def debug_form_errors=(value); end
  def default_adapter(*args); end
  def default_adapter=(value); end
  def default_navigation_icon(*args); end
  def default_navigation_icon=(value); end
  def display_methods(*args); end
  def display_methods=(value); end
  def favicon(*args); end
  def favicon=(value); end
  def footer(*args); end
  def footer=(value); end

  # Register a custom form field class
  def form_field(name, klass); end

  # Register global helpers available to all Trestle admins
  def helper(*helpers, &block); end

  def helper_module(*args); end
  def helper_module=(value); end
  def helpers(*args); end
  def helpers=(value); end

  # Register an extension hook
  def hook(name, options = T.unsafe(nil), &block); end

  def hooks(*args); end
  def hooks=(value); end
  def javascript_i18n_keys(*args); end
  def javascript_i18n_keys=(value); end
  def load_paths(*args); end
  def load_paths=(value); end

  # Register a global navigation menu block
  def menu(&block); end

  def menus(*args); end
  def menus=(value); end
  def path(*args); end
  def path=(value); end
  def persistent_params(*args); end
  def persistent_params=(value); end
  def reload(*args); end
  def reload=(value); end
  def root(*args); end
  def root=(value); end
  def root_breadcrumbs(*args); end
  def root_breadcrumbs=(value); end
  def site_logo(*args); end
  def site_logo=(value); end
  def site_logo_small(*args); end
  def site_logo_small=(value); end
  def site_title(*args); end
  def site_title=(value); end
  def theme(*args); end
  def theme=(value); end
  def timestamp_precision(*args); end
  def timestamp_precision=(value); end
  def turbolinks(*args); end
  def turbolinks=(value); end
end

# Callbacks
class Trestle::Configuration::Action < ::Struct
  # Returns the value of attribute block
  def block; end

  # Sets the attribute block
  def block=(_); end

  # Returns the value of attribute options
  def options; end

  # Sets the attribute options
  def options=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module Trestle::ContainerHelper
  def container(&block); end
end

class Trestle::ContainerHelper::Context
  def initialize(template); end

  def default_sidebar_options; end
  def sidebar(options = T.unsafe(nil), &block); end
end

module Trestle::Controller; end

module Trestle::Controller::Breadcrumbs
  extend ::ActiveSupport::Concern

  protected

  def breadcrumb(label, path = T.unsafe(nil)); end
  def breadcrumbs; end
end

module Trestle::Controller::Callbacks
  extend ::ActiveSupport::Concern
end

module Trestle::Controller::Dialog
  extend ::ActiveSupport::Concern

  protected

  def dialog_request?; end
end

module Trestle::Controller::Helpers
  extend ::ActiveSupport::Concern
end

module Trestle::Controller::Layout
  extend ::ActiveSupport::Concern

  protected

  def choose_layout; end
end

module Trestle::Controller::Location
  extend ::ActiveSupport::Concern

  def set_trestle_location_header; end
  def visit_location_with_turbolinks(location, action); end
end

module Trestle::Controller::Title
  extend ::ActiveSupport::Concern

  protected

  def default_title; end
  def title(title = T.unsafe(nil)); end
end

module Trestle::Controller::Toolbars
  extend ::ActiveSupport::Concern

  protected

  def default_toolbar_builder; end
  def toolbar(name, options = T.unsafe(nil), &block); end
  def toolbars; end
end

class Trestle::DashboardController < ::Trestle::ApplicationController
  def index; end

  private

  def _layout(lookup_context, formats); end
  def primary_admin; end

  class << self
    def middleware_stack; end
  end
end

class Trestle::Display
  def initialize(instance); end

  def to_s; end

  private

  def display_method; end
end

module Trestle::DisplayHelper
  def display(instance); end
end

class Trestle::Engine < ::Rails::Engine
  def reset_helpers!; end
end

# This module facilitiates the delegation of missing methods to a given @context variable.
#
# This allows code such as adapter and navigation blocks to be evaluated with access to methods from
# both the Adapter/Navigation instance, as well as the controller/view from where they are invoked.
module Trestle::EvaluationContext
  protected

  def method_missing(name, *args, &block); end

  private

  def context_responds_to?(name); end
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

module Trestle::FlashHelper
  def debug_form_errors?; end
  def instance_has_errors?; end
  def normalize_flash_alert(flash); end
end

class Trestle::Form
  def initialize(options = T.unsafe(nil), &block); end

  # Returns the value of attribute block.
  def block; end

  def dialog?; end

  # Returns the value of attribute options.
  def options; end

  def render(template, instance); end
end

class Trestle::Form::Automatic < ::Trestle::Form
  def initialize(admin, options = T.unsafe(nil)); end
end

class Trestle::Form::Builder < ::ActionView::Helpers::FormBuilder
  def errors(name); end
  def fields; end
  def fields=(val); end
  def raw_check_box(method, options = T.unsafe(nil), checked_value = T.unsafe(nil), unchecked_value = T.unsafe(nil)); end
  def raw_collection_check_boxes(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def raw_collection_radio_buttons(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def raw_collection_select(method, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def raw_color_field(method, options = T.unsafe(nil)); end
  def raw_date_field(method, options = T.unsafe(nil)); end
  def raw_date_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def raw_datetime_field(method, options = T.unsafe(nil)); end
  def raw_datetime_local_field(method, options = T.unsafe(nil)); end
  def raw_datetime_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def raw_email_field(method, options = T.unsafe(nil)); end
  def raw_file_field(method, options = T.unsafe(nil)); end
  def raw_grouped_collection_select(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def raw_month_field(method, options = T.unsafe(nil)); end
  def raw_number_field(method, options = T.unsafe(nil)); end
  def raw_password_field(method, options = T.unsafe(nil)); end
  def raw_phone_field(method, options = T.unsafe(nil)); end
  def raw_radio_button(method, tag_value, options = T.unsafe(nil)); end
  def raw_range_field(method, options = T.unsafe(nil)); end
  def raw_search_field(method, options = T.unsafe(nil)); end
  def raw_select(method, choices = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end
  def raw_telephone_field(method, options = T.unsafe(nil)); end
  def raw_text_area(method, options = T.unsafe(nil)); end
  def raw_text_field(method, options = T.unsafe(nil)); end
  def raw_time_field(method, options = T.unsafe(nil)); end
  def raw_time_select(method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def raw_time_zone_select(method, priority_zones = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil)); end
  def raw_url_field(method, options = T.unsafe(nil)); end
  def raw_week_field(method, options = T.unsafe(nil)); end

  protected

  def method_missing(name, *args, &block); end

  private

  def respond_to_missing?(name, include_all = T.unsafe(nil)); end

  class << self
    def fields; end
    def fields=(val); end
    def register(name, klass); end
    def rename_existing_helper_method(name); end
  end
end

class Trestle::Form::Field
  def initialize(builder, template, name, options = T.unsafe(nil), &block); end

  def admin(*_arg0, &_arg1); end

  # Returns the value of attribute block.
  def block; end

  # Returns the value of attribute builder.
  def builder; end

  def concat(*_arg0, &_arg1); end
  def content_tag(*_arg0, &_arg1); end
  def defaults; end
  def disabled?; end
  def errors; end
  def field; end
  def form_group(opts = T.unsafe(nil)); end
  def icon(*_arg0, &_arg1); end

  # Returns the value of attribute name.
  def name; end

  def normalize_options!; end

  # Returns the value of attribute options.
  def options; end

  def readonly?; end
  def render; end
  def safe_join(*_arg0, &_arg1); end

  # Returns the value of attribute template.
  def template; end

  protected

  def assign_error_class!; end
  def assign_options!(options); end
  def error_class; end
  def error_keys; end
  def extract_options(*keys); end
  def extract_wrapper_options!; end
end

module Trestle::Form::Fields; end

class Trestle::Form::Fields::CheckBox < ::Trestle::Form::Field
  include ::Trestle::Form::Fields::CheckBoxHelpers

  def initialize(builder, template, name, options = T.unsafe(nil), checked_value = T.unsafe(nil), unchecked_value = T.unsafe(nil)); end

  # Returns the value of attribute checked_value.
  def checked_value; end

  def extract_wrapper_options!; end
  def field; end
  def render; end

  # Returns the value of attribute unchecked_value.
  def unchecked_value; end
end

module Trestle::Form::Fields::CheckBoxHelpers
  def custom?; end
  def default_wrapper_class; end
  def defaults; end
  def inline?; end
  def input_class; end
  def label_class; end
  def switch?; end
end

class Trestle::Form::Fields::CollectionCheckBoxes < ::Trestle::Form::Field
  include ::Trestle::Form::Fields::CheckBoxHelpers

  def initialize(builder, template, name, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # Returns the value of attribute collection.
  def collection; end

  def default_html_options; end
  def defaults; end
  def field; end

  # Returns the value of attribute html_options.
  def html_options; end

  # Returns the value of attribute text_method.
  def text_method; end

  # Returns the value of attribute value_method.
  def value_method; end
end

class Trestle::Form::Fields::CollectionRadioButtons < ::Trestle::Form::Field
  include ::Trestle::Form::Fields::RadioButtonHelpers

  def initialize(builder, template, name, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # Returns the value of attribute collection.
  def collection; end

  def default_html_options; end
  def defaults; end
  def field; end

  # Returns the value of attribute html_options.
  def html_options; end

  # Returns the value of attribute text_method.
  def text_method; end

  # Returns the value of attribute value_method.
  def value_method; end
end

class Trestle::Form::Fields::CollectionSelect < ::Trestle::Form::Field
  def initialize(builder, template, name, collection, value_method, text_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # Returns the value of attribute collection.
  def collection; end

  def default_html_options; end
  def field; end

  # Returns the value of attribute html_options.
  def html_options; end

  # Returns the value of attribute text_method.
  def text_method; end

  # Returns the value of attribute value_method.
  def value_method; end
end

class Trestle::Form::Fields::ColorField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Fields::DateField < ::Trestle::Form::Fields::FormControl
  include ::Trestle::Form::Fields::DatePicker

  def field; end
end

module Trestle::Form::Fields::DatePicker
  def default_icon; end
  def enable_date_picker?; end
  def normalize_options!; end
end

class Trestle::Form::Fields::DateSelect < ::Trestle::Form::Field
  def initialize(builder, template, name, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  def default_html_options; end
  def field; end

  # Returns the value of attribute html_options.
  def html_options; end
end

class Trestle::Form::Fields::DatetimeField < ::Trestle::Form::Fields::FormControl
  include ::Trestle::Form::Fields::DatePicker

  def field; end
end

class Trestle::Form::Fields::DatetimeSelect < ::Trestle::Form::Field
  def initialize(builder, template, name, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  def default_html_options; end
  def field; end

  # Returns the value of attribute html_options.
  def html_options; end
end

class Trestle::Form::Fields::EmailField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Fields::FileField < ::Trestle::Form::Field
  def browse_text; end
  def choose_file_text; end
  def custom?; end
  def field; end
end

class Trestle::Form::Fields::FormControl < ::Trestle::Form::Field
  def defaults; end
  def input_group; end
  def input_group_addon(addon); end
  def normalize_options!; end
  def render; end
end

class Trestle::Form::Fields::FormGroup < ::Trestle::Form::Field
  def initialize(builder, template, name = T.unsafe(nil), options = T.unsafe(nil), &block); end

  def defaults; end
  def error_messages; end
  def help_message; end
  def label; end
  def render; end

  protected

  def error_class; end
  def error_keys; end
  def extract_wrapper_options!; end
end

Trestle::Form::Fields::FormGroup::WRAPPER_OPTIONS = T.let(T.unsafe(nil), Array)

class Trestle::Form::Fields::GroupedCollectionSelect < ::Trestle::Form::Field
  def initialize(builder, template, name, collection, group_method, group_label_method, option_key_method, option_value_method, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # Returns the value of attribute collection.
  def collection; end

  def default_html_options; end
  def field; end

  # Returns the value of attribute group_label_method.
  def group_label_method; end

  # Returns the value of attribute group_method.
  def group_method; end

  # Returns the value of attribute html_options.
  def html_options; end

  # Returns the value of attribute option_key_method.
  def option_key_method; end

  # Returns the value of attribute option_value_method.
  def option_value_method; end
end

class Trestle::Form::Fields::MonthField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Fields::NumberField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Fields::PasswordField < ::Trestle::Form::Fields::FormControl
  def defaults; end
  def field; end
end

class Trestle::Form::Fields::RadioButton < ::Trestle::Form::Field
  include ::Trestle::Form::Fields::RadioButtonHelpers

  def initialize(builder, template, name, tag_value, options = T.unsafe(nil)); end

  def extract_wrapper_options!; end
  def field; end
  def render; end

  # Returns the value of attribute tag_value.
  def tag_value; end
end

module Trestle::Form::Fields::RadioButtonHelpers
  def custom?; end
  def default_wrapper_class; end
  def inline?; end
  def input_class; end
  def label_class; end
end

class Trestle::Form::Fields::RangeField < ::Trestle::Form::Field
  def custom?; end
  def defaults; end
  def field; end
end

class Trestle::Form::Fields::SearchField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Fields::Select < ::Trestle::Form::Field
  def initialize(builder, template, name, choices = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  # Returns the value of attribute choices.
  def choices; end

  def default_choices; end
  def default_html_options; end
  def field; end

  # Returns the value of attribute html_options.
  def html_options; end
end

# Allows an array of model instances (or a scope) to be
# passed to the select field as the list of choices.
class Trestle::Form::Fields::Select::Choices
  include ::Enumerable

  def initialize(choices); end

  def each; end
  def empty?(*_arg0); end

  protected

  def option_text_and_value(option); end
end

class Trestle::Form::Fields::StaticField < ::Trestle::Form::Field
  def initialize(builder, template, name, value = T.unsafe(nil), options = T.unsafe(nil), &block); end

  def default_value; end
  def field; end

  # Returns the value of attribute value.
  def value; end
end

class Trestle::Form::Fields::TagSelect < ::Trestle::Form::Fields::Select
  def initialize(builder, template, name, options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  def default_html_options; end
end

class Trestle::Form::Fields::TelephoneField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Fields::TextArea < ::Trestle::Form::Fields::FormControl
  def defaults; end
  def field; end
end

class Trestle::Form::Fields::TextField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Fields::TimeField < ::Trestle::Form::Fields::FormControl
  include ::Trestle::Form::Fields::DatePicker

  def default_icon; end
  def field; end
end

class Trestle::Form::Fields::TimeSelect < ::Trestle::Form::Field
  def initialize(builder, template, name, options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  def default_html_options; end
  def field; end

  # Returns the value of attribute html_options.
  def html_options; end
end

class Trestle::Form::Fields::TimeZoneSelect < ::Trestle::Form::Field
  def initialize(builder, template, name, priority_zones = T.unsafe(nil), options = T.unsafe(nil), html_options = T.unsafe(nil), &block); end

  def default_html_options; end
  def field; end

  # Returns the value of attribute html_options.
  def html_options; end

  # Returns the value of attribute priority_zones.
  def priority_zones; end
end

class Trestle::Form::Fields::UrlField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Fields::WeekField < ::Trestle::Form::Fields::FormControl
  def field; end
end

class Trestle::Form::Renderer
  include ::ActionView::Context
  include ::ActionView::Helpers::CaptureHelper
  include ::Trestle::Hook::Helpers

  def initialize(template, form = T.unsafe(nil)); end

  def concat(*_arg0, &_arg1); end
  def fields_for(*args, &block); end
  def method_missing(name, *args, &block); end
  def render_form(*args, &block); end

  private

  def respond_to_missing?(name, include_all = T.unsafe(nil)); end
end

# Raw block helpers will pass their block argument directly to the method without wrapping it in a new output buffer.
Trestle::Form::Renderer::RAW_BLOCK_HELPERS = T.let(T.unsafe(nil), Array)

# Whitelisted helpers will concatenate their result to the output buffer when called.
Trestle::Form::Renderer::WHITELISTED_HELPERS = T.let(T.unsafe(nil), Array)

module Trestle::FormHelper
  def form; end
  def render_sidebar_as_tab?; end
  def sidebar(&block); end
  def trestle_form_for(instance, options = T.unsafe(nil), &block); end
  def with_form(form); end
  def with_identity_field_error_proc; end
end

Trestle::FormHelper::IDENTITY_FIELD_ERROR_PROC = T.let(T.unsafe(nil), Proc)

module Trestle::FormatHelper
  def autoformat_value(value, options = T.unsafe(nil)); end
  def format_value(value, options = T.unsafe(nil)); end
  def format_value_from_options(value, options = T.unsafe(nil)); end
end

module Trestle::GridHelper
  def col(columns = T.unsafe(nil), breakpoints = T.unsafe(nil)); end
  def divider(attrs = T.unsafe(nil)); end
  def row(attrs = T.unsafe(nil)); end
end

module Trestle::HeadingsHelper
  def h1(text, options = T.unsafe(nil)); end
  def h2(text, options = T.unsafe(nil)); end
  def h3(text, options = T.unsafe(nil)); end
  def h4(text, options = T.unsafe(nil)); end
  def h5(text, options = T.unsafe(nil)); end
  def h6(text, options = T.unsafe(nil)); end
end

class Trestle::Hook
  def initialize(name, options = T.unsafe(nil), &block); end

  def ==(other); end

  # Returns the value of attribute block.
  def block; end

  def evaluate(context, *args); end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute options.
  def options; end

  def visible?(context); end
end

module Trestle::Hook::Helpers
  def hook(name, *args, &block); end
  def hook?(name); end

  protected

  def hook_sets; end
  def hooks(name); end
end

class Trestle::Hook::Set
  def initialize; end

  def ==(other); end
  def any?(name); end
  def append(name, options = T.unsafe(nil), &block); end
  def empty?; end
  def for(name); end

  # Returns the value of attribute hooks.
  def hooks; end
end

module Trestle::HookHelper
  include ::Trestle::Hook::Helpers
end

module Trestle::I18nHelper
  def i18n_javascript_translations; end
end

module Trestle::IconHelper
  def icon(*classes); end
end

module Trestle::LayoutHelper
  def body_attributes; end
  def body_classes; end
end

Trestle::LayoutHelper::SIDEBAR_CLASSES = T.let(T.unsafe(nil), Hash)

class Trestle::ModelName
  def initialize(klass); end

  def ==(other); end
  def downcase(*_arg0, &_arg1); end

  # Returns the value of attribute klass.
  def klass; end

  def plural(options = T.unsafe(nil)); end
  def pluralize(options = T.unsafe(nil)); end
  def singular(options = T.unsafe(nil)); end
  def singularize(options = T.unsafe(nil)); end
  def titlecase(*_arg0, &_arg1); end
  def titleize(*_arg0, &_arg1); end
  def to_s; end
  def upcase(*_arg0, &_arg1); end

  protected

  # Default plural version if it cannot be determined from i18n
  def default_plural; end

  # Default singular version if it cannot be determined from i18n
  def default_singular; end

  # Safely delegates to ActiveModel::Name#human, catching exceptions caused by missing pluralizations
  def human(default, options = T.unsafe(nil)); end

  # Checks if multiple pluralization forms (e.g. zero/one/few/many/other) are available from i18n
  def i18n_pluralizations_available?; end

  # Checks if the model can be translated by ActiveModel
  def i18n_supported?; end
end

# Matches :other i18n pluralization option for most languages
Trestle::ModelName::I18N_PLURAL_COUNT = T.let(T.unsafe(nil), Integer)

class Trestle::Navigation
  def initialize(items); end

  def by_group; end
  def each(&block); end
  def first; end

  # Returns the value of attribute items.
  def items; end

  private

  def groups; end
  def stable_sort(items); end

  class << self
    def build(blocks, context); end
  end
end

class Trestle::Navigation::Block
  def initialize(admin = T.unsafe(nil), &block); end

  # Returns the value of attribute admin.
  def admin; end

  # Returns the value of attribute block.
  def block; end

  def items(context); end
end

class Trestle::Navigation::Block::Evaluator
  include ::Trestle::EvaluationContext

  def initialize(admin = T.unsafe(nil), context = T.unsafe(nil)); end

  def default_path; end
  def group(name, options = T.unsafe(nil)); end
  def item(name, path = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute items.
  def items; end
end

class Trestle::Navigation::Group
  def initialize(name, options = T.unsafe(nil)); end

  def <=>(other); end
  def ==(other); end
  def collapse?; end
  def eql?(other); end
  def hash; end
  def id; end
  def label; end
  def merge(other); end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute options.
  def options; end

  def priority; end
end

class Trestle::Navigation::Item
  def initialize(name, path = T.unsafe(nil), options = T.unsafe(nil)); end

  def <=>(other); end
  def ==(other); end
  def admin; end
  def badge; end
  def badge?; end
  def eql?(other); end
  def group; end
  def hash; end
  def html_options; end
  def icon; end
  def label; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute options.
  def options; end

  # Returns the value of attribute path.
  def path; end

  def priority; end
  def visible?(context); end
end

class Trestle::Navigation::Item::Badge
  def initialize(options); end

  def html_class; end

  # Returns the value of attribute text.
  def text; end
end

class Trestle::Navigation::NullGroup
  def <=>(other); end
  def ==(other); end
  def eql?(other); end
  def hash; end
  def id; end
  def merge(other); end
  def present?; end
end

module Trestle::NavigationHelper
  def current_admin?(admin); end
  def current_navigation_item?(item); end
  def navigation_group_collapsed?(group); end

  private

  def collapsed_navigation_groups; end
  def expanded_navigation_groups; end
  def navigation_groups(state); end
end

class Trestle::Options < ::Hash
  def merge(other, &block); end
  def merge!(other, &block); end

  class << self
    def new(hash = T.unsafe(nil)); end
  end
end

module Trestle::PaginationHelper
  def page_entries_info(collection, options = T.unsafe(nil)); end
end

module Trestle::ParamsHelper
  def persistent_params; end
end

class Trestle::Registry
  include ::Enumerable

  def initialize; end

  # The admins hash is left exposed for backwards compatibility
  def admins; end

  def each(&block); end
  def empty?; end
  def lookup(admin); end
  def lookup_admin(admin); end
  def lookup_model(model); end
  def register(admin, register_model: T.unsafe(nil)); end
  def reset!; end
end

class Trestle::Reloader
  def initialize(files, dirs = T.unsafe(nil)); end

  def clear; end
  def execute(*_arg0, &_arg1); end
  def execute_if_updated(*_arg0, &_arg1); end
  def install(app); end
  def load_paths; end
  def updated?(*_arg0, &_arg1); end
  def updater; end
end

class Trestle::Resource < ::Trestle::Admin
  include ::Trestle::Resource::AdapterMethods
  extend ::Trestle::Resource::AdapterMethods::ClassMethods

  def build_instance(*_arg0, &_arg1); end
  def collection(*_arg0, &_arg1); end
  def count(*_arg0, &_arg1); end
  def decorate_collection(*_arg0, &_arg1); end
  def decorator; end
  def decorator=(_arg0); end
  def decorator?; end
  def default_form_attributes(*_arg0, &_arg1); end
  def default_table_attributes(*_arg0, &_arg1); end
  def delete_instance(*_arg0, &_arg1); end
  def finalize_collection(*_arg0, &_arg1); end
  def find_instance(*_arg0, &_arg1); end
  def human_attribute_name(*_arg0, &_arg1); end
  def merge_scopes(*_arg0, &_arg1); end
  def paginate(*_arg0, &_arg1); end
  def pagination_options; end
  def pagination_options=(_arg0); end
  def pagination_options?; end
  def permitted_params(*_arg0, &_arg1); end

  # Prepares a collection for use in the resource controller's index action.
  #
  # Applies scopes, sorts, pagination, finalization and decorators according
  # to the admin's adapter and any admin-specific adapter methods.
  def prepare_collection(params, options = T.unsafe(nil)); end

  def save_instance(*_arg0, &_arg1); end

  # Evaluates the admin's scope block(s) using the adapter context
  # and returns a hash of Scope objects keyed by the scope name.
  def scopes; end

  def sort(*_arg0, &_arg1); end
  def to_param(*_arg0, &_arg1); end
  def update_instance(*_arg0, &_arg1); end

  class << self
    def actions; end
    def build(&block); end
    def build_instance(*_arg0, &_arg1); end
    def collection(*_arg0, &_arg1); end
    def column_sorts; end
    def count(*_arg0, &_arg1); end
    def decorate_collection(*_arg0, &_arg1); end
    def decorator; end
    def decorator=(value); end
    def decorator?; end
    def default_form_attributes(*_arg0, &_arg1); end
    def default_human_admin_name; end
    def default_table_attributes(*_arg0, &_arg1); end
    def delete_instance(*_arg0, &_arg1); end
    def finalize_collection(*_arg0, &_arg1); end
    def find_instance(*_arg0, &_arg1); end
    def form; end
    def human_attribute_name(*_arg0, &_arg1); end
    def instance_path(instance, options = T.unsafe(nil)); end
    def merge_scopes(*_arg0, &_arg1); end
    def model; end
    def model_name; end
    def paginate(*_arg0, &_arg1); end
    def pagination_options; end
    def pagination_options=(value); end
    def pagination_options?; end
    def permitted_params(*_arg0, &_arg1); end

    # Deprecated: use instance method instead
    def prepare_collection(params, options = T.unsafe(nil)); end

    def readonly?; end
    def return_locations; end
    def root_action; end
    def routes; end
    def save_instance(*_arg0, &_arg1); end
    def scopes; end
    def singular?; end
    def sort(*_arg0, &_arg1); end
    def t(key, options = T.unsafe(nil)); end
    def table; end
    def to_param(*_arg0, &_arg1); end
    def translate(key, options = T.unsafe(nil)); end
    def update_instance(*_arg0, &_arg1); end
    def validate!; end

    private

    def infer_model_class; end
  end
end

module Trestle::Resource::AdapterMethods
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Trestle::Resource::AdapterMethods::ClassMethods

  # Adapter instance bound to the current resource's context.
  def adapter; end
end

module Trestle::Resource::AdapterMethods::ClassMethods
  # Unbound instance of adapter.
  def adapter; end

  # Returns the adapter class for this admin.
  #
  # Defaults to a subclass of `Trestle.config.default_adapter` with
  # the admin-specific adapter methods module included.
  def adapter_class; end

  # Sets an explicit adapter class for this admin.
  # A subclass is created with the admin-specific adapter methods module included.
  def adapter_class=(klass); end

  # Declares a method that is handled by the admin's adapter class.
  def adapter_method(name); end

  # Module container for admin-specific adapter methods.
  def adapter_methods; end

  # Defines an admin-specific adapter method.
  #
  # The given block is wrapped rather than passed to #define_method directly, so that
  # adapter methods can be defined with incomplete block parameters. Unfortunately
  # this means we lose the ability to call super from within a custom adapter method.
  def define_adapter_method(name, &block); end
end

class Trestle::Resource::Builder < ::Trestle::Admin::Builder
  def adapter(&block); end
  def adapter=(adapter); end
  def build_instance(&block); end
  def collection(&block); end
  def count(&block); end
  def decorate_collection(&block); end
  def decorator(decorator); end
  def delete_instance(&block); end
  def find_instance(&block); end
  def instance(&block); end
  def merge_scopes(&block); end
  def paginate(options = T.unsafe(nil), &block); end
  def params(&block); end
  def remove_action(*actions); end
  def return_to(options = T.unsafe(nil), &block); end
  def save_instance(&block); end
  def scope(name, scope = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def scopes(options = T.unsafe(nil), &block); end
  def sort(&block); end
  def sort_column(column, &block); end
  def to_param(&block); end
  def update_instance(&block); end

  protected

  def normalize_table_options(name, options); end

  class << self
    def admin_class; end
    def controller; end
  end
end

class Trestle::Resource::Collection
  def initialize(admin, options = T.unsafe(nil)); end

  def collection(*_arg0, &_arg1); end
  def column_sorts(*_arg0, &_arg1); end
  def decorate?; end
  def decorate_collection(*_arg0, &_arg1); end
  def finalize?; end
  def finalize_collection(*_arg0, &_arg1); end
  def merge_scopes(*_arg0, &_arg1); end
  def paginate(*_arg0, &_arg1); end
  def paginate?; end
  def prepare(params); end
  def scope?; end
  def scopes(*_arg0, &_arg1); end
  def sort(*_arg0, &_arg1); end
  def sort?; end

  private

  def apply_scopes(collection, params); end
  def apply_sorting(collection, params); end
end

module Trestle::Resource::Controller; end

module Trestle::Resource::Controller::Actions
  def create; end
  def destroy; end
  def edit; end
  def index; end
  def new; end
  def show; end
  def update; end
end

module Trestle::Resource::Controller::DataMethods
  extend ::ActiveSupport::Concern

  protected

  def build_instance; end
  def delete_instance; end
  def load_collection; end
  def load_instance; end
  def resource_params; end
  def save_instance; end
  def update_instance; end
end

module Trestle::Resource::Controller::Redirection
  protected

  def redirect_to_return_location(action, instance, default:); end
end

module Trestle::Resource::Controller::Toolbar
  def default_toolbar_builder; end
end

Trestle::Resource::READONLY_ACTIONS = T.let(T.unsafe(nil), Array)
Trestle::Resource::RESOURCE_ACTIONS = T.let(T.unsafe(nil), Array)
module Trestle::Resource::Toolbar; end

class Trestle::Resource::Toolbar::Builder < ::Trestle::Toolbar::Builder
  def admin(*_arg0, &_arg1); end
  def delete; end
  def dismiss; end
  def instance(*_arg0, &_arg1); end
  def new; end
  def ok; end
  def save; end
  def save_or_dismiss(action = T.unsafe(nil)); end
  def t(*_arg0, &_arg1); end
  def translate(*_arg0, &_arg1); end

  protected

  def action?(action); end

  class << self
    def builder_methods; end
  end
end

class Trestle::ResourceController < ::Trestle::AdminController
  include ::Trestle::Resource::Controller::Actions
  include ::Trestle::Resource::Controller::DataMethods
  include ::Trestle::Resource::Controller::Redirection
  include ::Trestle::Resource::Controller::Toolbar

  def collection; end
  def collection=(_arg0); end
  def instance; end
  def instance=(_arg0); end

  private

  def _layout(lookup_context, formats); end

  class << self
    def __callbacks; end
    def _helper_methods; end
    def middleware_stack; end
  end
end

module Trestle::ResourceController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::Trestle::ApplicationController::HelperMethods
  include ::Trestle::AdminController::HelperMethods

  # def collection(*args, &block); end
  # def instance(*args, &block); end
end

class Trestle::Scopes
  include ::Enumerable

  def initialize(definition, context); end

  def active(params); end
  def classes; end
  def each(&block); end
  def grouped; end
  def grouped?; end
  def options(*_arg0, &_arg1); end

  private

  def layout_class; end
end

class Trestle::Scopes::Block
  def initialize(&block); end

  # Returns the value of attribute block.
  def block; end

  # Evaluates the scope block within the given admin context
  # and returns an array of the scopes that were defined.
  def scopes(context); end
end

class Trestle::Scopes::Block::Evaluator
  include ::Trestle::EvaluationContext

  def initialize(context = T.unsafe(nil)); end

  def scope(name, scope = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Returns the value of attribute scopes.
  def scopes; end
end

class Trestle::Scopes::Definition
  def initialize; end

  def append(&block); end

  # Returns the value of attribute blocks.
  def blocks; end

  # Evaluates each of the scope blocks within the given admin context
  # and returns a hash of Scope objects keyed by the scope name.
  def evaluate(context); end

  # Returns the value of attribute options.
  def options; end
end

class Trestle::Scopes::Scope
  def initialize(admin, name, options = T.unsafe(nil), &block); end

  def active?(params); end
  def apply(collection); end

  # Returns the value of attribute block.
  def block; end

  def count(collection); end
  def default?; end
  def group; end
  def label; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute options.
  def options; end

  def to_param; end
end

module Trestle::SortHelper
  def sort_link(text, field, options = T.unsafe(nil)); end
end

class Trestle::SortHelper::SortLink
  def initialize(field, params, options); end

  def active?; end
  def classes; end
  def current_order; end
  def default_order; end
  def field; end
  def order; end
  def params; end
  def reverse_order(order); end
end

module Trestle::StatusHelper
  def status_tag(label, status = T.unsafe(nil), options = T.unsafe(nil)); end
end

class Trestle::Tab
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper

  def initialize(name, options = T.unsafe(nil)); end

  def badge; end
  def id(tag = T.unsafe(nil)); end
  def label; end

  # Returns the value of attribute name.
  def name; end

  # Returns the value of attribute options.
  def options; end
end

module Trestle::TabHelper
  def tab(name, options = T.unsafe(nil)); end
  def tabs; end
end

class Trestle::Table
  def initialize(options = T.unsafe(nil)); end

  def admin; end
  def autolink?; end

  # Returns the value of attribute columns.
  def columns; end

  def header?; end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  def options=(_arg0); end

  def renderer(template); end
  def row; end

  # Sets the attribute row
  def row=(_arg0); end

  def sortable?; end
  def with_options(opts = T.unsafe(nil)); end
end

class Trestle::Table::ActionsColumn
  def initialize(options = T.unsafe(nil), &block); end

  def default_actions; end

  # Returns the value of attribute options.
  def options; end

  def renderer(table:, template:); end

  # Returns the value of attribute toolbar.
  def toolbar; end
end

class Trestle::Table::ActionsColumn::ActionsBuilder < ::Trestle::Toolbar::Builder
  def initialize(template, instance, admin); end

  # Returns the value of attribute admin.
  def admin; end

  # Disallow button tags within the actions toolbar. Alias to link for backwards compatibility.
  def button(label, instance_or_url = T.unsafe(nil), options = T.unsafe(nil), &block); end

  def delete; end
  def edit; end

  # Returns the value of attribute instance.
  def instance; end

  def show; end

  private

  def t(key, options = T.unsafe(nil)); end
  def translate(key, options = T.unsafe(nil)); end

  class << self
    def builder_methods; end
  end
end

class Trestle::Table::ActionsColumn::Renderer < ::Trestle::Table::Column::Renderer
  def classes; end
  def content(instance); end
  def header; end
end

class Trestle::Table::Automatic < ::Trestle::Table
  def initialize(admin); end

  def actions_column; end
  def columns; end
  def content_columns; end
end

class Trestle::Table::Builder < ::Trestle::Builder
  def initialize(options = T.unsafe(nil)); end

  def actions(options = T.unsafe(nil), &block); end
  def column(field, proc = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def row(options = T.unsafe(nil), &block); end
  def selectable_column(options = T.unsafe(nil)); end
  def table; end
  def target; end
end

class Trestle::Table::Column
  def initialize(field, options = T.unsafe(nil), &block); end

  # Returns the value of attribute block.
  def block; end

  # Returns the value of attribute field.
  def field; end

  # Returns the value of attribute options.
  def options; end

  def renderer(table:, template:); end
  def sort_field; end
  def sort_options; end
  def sortable?; end
end

class Trestle::Table::Column::Renderer
  def initialize(column, table:, template:); end

  def classes; end
  def content(instance); end
  def data; end
  def header; end
  def options(*_arg0, &_arg1); end
  def render(instance); end
  def render?; end

  private

  def column_value(instance); end
  def header_text; end
end

class Trestle::Table::Renderer
  def initialize(table, template); end

  def classes; end
  def columns; end
  def data; end
  def header?(*_arg0, &_arg1); end
  def id; end
  def options(*_arg0, &_arg1); end
  def row; end
end

class Trestle::Table::Row
  def initialize(options = T.unsafe(nil), &block); end

  # Returns the value of attribute block.
  def block; end

  # Returns the value of attribute options.
  def options; end

  def renderer(table:, template:); end
end

class Trestle::Table::Row::Renderer
  def initialize(row, table:, template:); end

  def columns; end
  def options(instance); end
  def render(instance); end

  protected

  def admin_url_for(instance); end
end

class Trestle::Table::SelectColumn
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  def options; end

  def renderer(table:, template:); end
end

class Trestle::Table::SelectColumn::Renderer < ::Trestle::Table::Column::Renderer
  def classes; end
  def content(instance); end
  def data; end
  def header; end

  private

  def checkbox(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def checkbox_id(param); end
end

module Trestle::TableHelper
  def pagination(collection:, entry_name: T.unsafe(nil), **options); end
  def table(name = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

module Trestle::TimestampHelper
  def datestamp(date, options = T.unsafe(nil)); end
  def timestamp(time, options = T.unsafe(nil)); end
end

module Trestle::TitleHelper
  def default_title; end
  def title; end
end

class Trestle::Toolbar
  def initialize(builder = T.unsafe(nil)); end

  def append(&block); end
  def clear!; end
  def groups(template, *args); end
  def prepend(&block); end
end

# Wraps a toolbar block to provide evaluation within the context of a template and enumerator
class Trestle::Toolbar::Block
  def initialize(&block); end

  def evaluate(builder, template, enumerator, *args); end
end

class Trestle::Toolbar::Builder
  def initialize(template); end

  def builder_methods; end
  def builder_methods=(_arg0); end
  def builder_methods?; end
  def button(label, options = T.unsafe(nil), &block); end
  def dropdown(label = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def link(label, instance_or_url = T.unsafe(nil), options = T.unsafe(nil), &block); end

  class << self
    def builder_method(*methods); end
    def builder_methods; end
    def builder_methods=(value); end
    def builder_methods?; end
  end
end

class Trestle::Toolbar::Button < ::Trestle::Toolbar::Item
  def render; end
end

# The toolbar Context is the object that is yielded to a toolbar block and handles the delegation of builder methods.
class Trestle::Toolbar::Context
  def initialize(builder, enumerator, *args); end

  # Returns the value of attribute builder.
  def builder; end

  def group; end

  private

  def method_missing(name, *args, &block); end
  def respond_to_missing?(name, include_all = T.unsafe(nil)); end
end

class Trestle::Toolbar::Dropdown < ::Trestle::Toolbar::Button
  def button_style_classes; end
  def label; end
  def options; end
  def render_menu; end
end

class Trestle::Toolbar::Item
  def initialize(template, label, options = T.unsafe(nil), &block); end

  def ==(other); end
  def admin_link_to(*_arg0, &_arg1); end
  def button_classes; end
  def button_label(content, options); end
  def button_style; end
  def button_style_classes; end
  def button_tag(*_arg0, &_arg1); end
  def content_tag(*_arg0, &_arg1); end
  def icon(*_arg0, &_arg1); end

  # Returns the value of attribute label.
  def label; end

  # Returns the value of attribute menu.
  def menu; end

  def options; end
  def render; end
  def render_menu; end
  def safe_join(*_arg0, &_arg1); end
  def to_s; end
end

class Trestle::Toolbar::Link < ::Trestle::Toolbar::Item
  def initialize(template, label, instance_or_url = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Returns the value of attribute instance_or_url.
  def instance_or_url; end

  def render; end
end

class Trestle::Toolbar::Menu
  def initialize(template); end

  def build(&block); end
  def content_tag(*_arg0, &_arg1); end

  # Returns the value of attribute items.
  def items; end

  def render_items; end
  def render_toggle(options = T.unsafe(nil)); end
  def safe_join(*_arg0, &_arg1); end
end

class Trestle::Toolbar::Menu::Builder
  def initialize(menu, template); end

  def admin_link_to(*_arg0, &_arg1); end
  def content_tag(*_arg0, &_arg1); end
  def divider; end
  def header(text); end
  def item(options = T.unsafe(nil), &block); end
  def link(content, instance_or_url = T.unsafe(nil), options = T.unsafe(nil), &block); end
end

module Trestle::ToolbarsHelper
  def deprecated_toolbar(name); end
  def render_toolbar(toolbar, *args); end
end

module Trestle::UrlHelper
  def admin_for(instance); end
  def admin_link_to(content, instance_or_url = T.unsafe(nil), options = T.unsafe(nil), &block); end
  def admin_url_for(instance, options = T.unsafe(nil)); end
end

Trestle::UrlHelper::DIALOG_ACTIONS = T.let(T.unsafe(nil), Array)
Trestle::VERSION = T.let(T.unsafe(nil), String)
