import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  DateTime: any;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** An example field added by the generator */
  greet: Scalars['String'];
};


export type MutationGreetArgs = {
  value: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  testField: Scalars['String'];
  testSignalType: SignalType;
  /** Application server version. */
  version?: Maybe<Scalars['String']>;
  /** The currently authenticated user. */
  viewer?: Maybe<User>;
};

export enum SignalType {
  Bed = 'BED',
  Spot = 'SPOT'
}

export type Subscription = {
  __typename?: 'Subscription';
  testField: TestFieldPayload;
};

/** Autogenerated return type of TestField */
export type TestFieldPayload = {
  __typename?: 'TestFieldPayload';
  value?: Maybe<Scalars['Int']>;
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['DateTime'];
  currentLoginAt?: Maybe<Scalars['DateTime']>;
  currentLoginIp?: Maybe<Scalars['String']>;
  email: Scalars['String'];
  emailVerified: Scalars['Boolean'];
  id: Scalars['ID'];
  lastLoginAt?: Maybe<Scalars['DateTime']>;
  lastLoginIp?: Maybe<Scalars['String']>;
  updatedAt: Scalars['DateTime'];
};

export type AccountIndexRouteQueryVariables = Exact<{ [key: string]: never; }>;


export type AccountIndexRouteQuery = { __typename?: 'Query', viewer?: { __typename?: 'User', id: string } | null };

export type AccountIndexRouteSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type AccountIndexRouteSubscription = { __typename?: 'Subscription', testField: { __typename?: 'TestFieldPayload', value?: number | null } };


export const AccountIndexRouteQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AccountIndexRouteQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<AccountIndexRouteQuery, AccountIndexRouteQueryVariables>;
export const AccountIndexRouteSubscriptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"AccountIndexRouteSubscription"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"testField"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]} as unknown as DocumentNode<AccountIndexRouteSubscription, AccountIndexRouteSubscriptionVariables>;