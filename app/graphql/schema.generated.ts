import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T;
export type InputMaybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  DateTime: string;
};

/** Autogenerated input type of CreateShelter */
export type CreateShelterInput = {
  readonly address?: InputMaybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: InputMaybe<Scalars['String']>;
  readonly email?: InputMaybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly phone?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateShelter */
export type CreateShelterPayload = {
  readonly __typename?: 'CreateShelterPayload';
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars['String']>;
  readonly errors?: Maybe<ReadonlyArray<ValidationError>>;
  readonly shelter?: Maybe<Shelter>;
};

export type Mutation = {
  readonly __typename?: 'Mutation';
  readonly createShelter?: Maybe<CreateShelterPayload>;
  /** An example field added by the generator */
  readonly greet: Scalars['String'];
};


export type MutationCreateShelterArgs = {
  input: CreateShelterInput;
};


export type MutationGreetArgs = {
  value: Scalars['String'];
};

export type Query = {
  readonly __typename?: 'Query';
  readonly csrfToken: Scalars['String'];
  readonly testField: Scalars['String'];
  readonly testSignalType: SignalType;
  /** Application server version. */
  readonly version: Scalars['String'];
  /** The currently authenticated user. */
  readonly viewer?: Maybe<User>;
};

export type Shelter = {
  readonly __typename?: 'Shelter';
  readonly address?: Maybe<Scalars['String']>;
  readonly createdAt: Scalars['DateTime'];
  readonly email?: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly phone?: Maybe<Scalars['String']>;
  readonly updatedAt: Scalars['DateTime'];
};

export const enum SignalType {
  Bed = 'BED',
  Spot = 'SPOT'
};

export type Subscription = {
  readonly __typename?: 'Subscription';
  readonly testField: TestFieldPayload;
};

/** Autogenerated return type of TestField */
export type TestFieldPayload = {
  readonly __typename?: 'TestFieldPayload';
  readonly value?: Maybe<Scalars['Int']>;
};

export type User = {
  readonly __typename?: 'User';
  readonly createdAt: Scalars['DateTime'];
  readonly currentLoginAt?: Maybe<Scalars['DateTime']>;
  readonly currentLoginIp?: Maybe<Scalars['String']>;
  readonly email: Scalars['String'];
  readonly emailVerified: Scalars['Boolean'];
  readonly id: Scalars['ID'];
  readonly lastLoginAt?: Maybe<Scalars['DateTime']>;
  readonly lastLoginIp?: Maybe<Scalars['String']>;
  readonly updatedAt: Scalars['DateTime'];
};

export type ValidationError = {
  readonly __typename?: 'ValidationError';
  readonly field?: Maybe<Scalars['String']>;
  readonly message?: Maybe<Scalars['String']>;
};

export type AppLayoutViewerFragment = { readonly __typename?: 'User', readonly id: string };

export type AppQueryVariables = Exact<{ [key: string]: never; }>;


export type AppQuery = { readonly __typename?: 'Query', readonly csrfToken: string, readonly version: string, readonly viewer?: { readonly __typename?: 'User', readonly id: string } };

export type AccountIndexRouteQueryVariables = Exact<{ [key: string]: never; }>;


export type AccountIndexRouteQuery = { readonly __typename?: 'Query', readonly viewer?: { readonly __typename?: 'User', readonly id: string, readonly email: string, readonly createdAt: string, readonly updatedAt: string } };

export type AccountIndexRouteSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type AccountIndexRouteSubscription = { readonly __typename?: 'Subscription', readonly testField: { readonly __typename?: 'TestFieldPayload', readonly value?: number } };

export const AppLayoutViewerFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AppLayoutViewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]} as unknown as DocumentNode<AppLayoutViewerFragment, unknown>;
export const AppQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AppQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"csrfToken"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"AppLayoutViewer"}}]}}]}},...AppLayoutViewerFragmentDoc.definitions]} as unknown as DocumentNode<AppQuery, AppQueryVariables>;
export const AccountIndexRouteQueryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AccountIndexRouteQuery"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"createdAt"}},{"kind":"Field","name":{"kind":"Name","value":"updatedAt"}}]}}]}}]} as unknown as DocumentNode<AccountIndexRouteQuery, AccountIndexRouteQueryVariables>;
export const AccountIndexRouteSubscriptionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"AccountIndexRouteSubscription"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"testField"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]} as unknown as DocumentNode<AccountIndexRouteSubscription, AccountIndexRouteSubscriptionVariables>;